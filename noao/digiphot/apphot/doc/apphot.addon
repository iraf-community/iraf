.RP
.TL
Instructions for Installing and Running the Test Version of APPHOT
.AU
Lindsey E. Davis
.K2 "" "" "*"
December 15, 1987
.NH
Introduction
.PP
The following document contains instructions on how to install
and run the test version of the APPHOT package. The package is
being made available for user testing on a user beware basis.
This package will run under IRAF versions 2.5 and later. Those few
version 2.5 bugs which affect the APPHOT user are mentioned below. All
these bugs have of course been fixed in our in house version 2.6. Any errors,
problems, or comments should be directed to the author.
.PP
The principal limitation of the current version of the package is the absence
of image cursor readback and the image display facilities in IRAF itself.
However, by setting
the image cursor to the graphics cursor and the apphot task parameter
"display" to \fIstdgraph\fR all the APPHOT tasks will run
in interactive mode using  a contour plot in lieu of a displayed
image and the graphics cursor in lieu of the image display cursor.
As long as the programs are not asked to alternate frequently between
reading the graphics cursor off the contour plot and other sorts of graphics
operations this interim measure works reasonably well.
.PP
The APPHOT tasks may also run in interactive mode but be driven by a user
supplied coordinate list, as can be produced by the APPHOT \fBdaofind\fR
task or the \fBimtool\fR facility on the SUN.
Commands exist in most of the APPHOT tasks 
to select stars from a list by number, move to the next star and rewind
the coordinate list. All the cursor commands are available but the
contour plot is unnecessary.
.PP
Finally all the tasks can be run without either the image display or
terminal graphics by defining a coordinate list and setting the task
parameter "interactive" to \fIno\fR.
.NH
Installing the APPHOT Package
.PP
To install the APPHOT package from a tar tape
the following steps should be followed.
The apphot installer must be logged in as iraf to do the installation.
It is assumed that the package will be installed in the LOCAL
directory, but it may be installed elsewhere if desired.
Note that the following instructions are independent of the host computer.
.nf
\fL
	cl> cd iraf$local/tasks
	cl> rtar -xf \fI[tape device]\fL apphot
\fR
.fi
.PP
Compile and link the APPHOT package in background.  Note that this
process can take on the order of 1 to 3 hours depending on the machine and
the load. Check to be sure
any files ending in \fL.[aeo]\fR have been deleted.  The results will
be printed in the spool file.  There should be no errors recorded in 
this file.
.nf
\fL
	cl> cd apphot
	cl> delete *.[aeo]
	cl> mkpkg >& spool &
\fR
.fi
.PP
To install the on-line help pages
the following steps should be followed.
.nf
\fL
	cl> cd local$tasks
\fR
.fi
.PP
And then add the following lines to the local.hd file.
.nf
\fL
        $apphot = local$tasks/apphot/

        apphot    men = apphot$apphot.men,
                  hlp = ..,
                  sys = apphot$apphot.hlp,
                  pkg = apphot$apphot.hd,
                  src = apphot$apphot.cl
\fR
.fi
.PP
To make the on-line help available to the user, type
.nf
\fL
	cl> softools
	cl> mkhelpdb
\fR
.PP
The following two entries must then
be made in each user's \fBloginuser.cl\fR file in order
to run the test version of APPHOT.
(Note that if this is a new \fBloginuser.cl\fR file,
be sure to include the \fBkeep\fR as shown.)  For example,
.nf
\fL
 	 set apphot = local$tasks/apphot/
	 task apphot.pkg = "apphot$apphot.cl"

	 keep
\fR
.fi
.PP
If one would rather install APPHOT in the LOCAL package so that it
is available to all users without having to put the above entries in 
everyone's \fBloginuser.cl\fR file, then enter the following in the
\fBlocal.cl\fR file,
.nf
\fL
	set apphot   =   "ltasks$apphot/"

	task apphot  =   "apphot$apphot.cl"
\fR
.fi
and the following should also be entered in the \fBlocal.men\fR file.
.nf
\fL
	apphot - Aperture photometry package
\fR
.fi
.bp
.NH
Using APPHOT
.NH 2
Loading the APPHOT Package
.PP
At this point the user is ready to run the APPHOT tasks. The individual manual
pages should be consulted for details of each task.  Type \fBapphot\fR
and the following menu of tasks should be displayed.  It may be necessary to
log out and back into IRAF so the \fBloginuser.cl\fL file is executed.
.nf
\fL
     apselect     daofind     fitskypars     photpars     radprof
	 center       fitpsf      datapars       polypars     wphot
	 centerpars   fitsky      phot           polyphot
\fR
.fi
.NH 2
APPHOT Parameter Set (PSET) Files
.PP
APPHOT algorithm parameters have been gathered together into logical
groups and stored in  parameter set (pset)
files.  The use of pset files permits the user to store APPHOT
parameters with their relevant datasets rather than in the \fBuparm\fR
directory and allows APPHOT tasks to share common parameter sets.
APPHOT presently supports 5 pset files: 1) \fBdatapars\fR, which contains
the data dependent parameters 2) \fBcenterpars\fR, which contains
the centering algorithm parameters
3) \fBfitskypars\fR, which contains the sky fitting algorithm parameters
4) \fBphotpars\fR, which contains the multi-aperture photometry parameters and
5) \fBpolypars\fR,
which contains the polygonal aperture photometry parameters.
The user should consult the
manual page for each of the named pset files as well as the attached
parameter set document, \fIExternal Parameter Sets in the CL and Related
Revisions\fR, by Doug Tody.
.NH 2
Running APPHOT Without an Image Display
.PP
All of the APPHOT tasks are designed to read the image cursor in interactive
mode. However since 
there is at present no image display kernel, the image cursor must be
redirected. At this point the user has two choices.
.PP
In the first case a contour plot of the image can be used to simulate
the real image.
The following
command should be added to each user's loginuser.cl file before the
\fBkeep\fR statement or typed on the terminal at the beginning of each
APPHOT session.
.nf
\fL
	 set stdimcur = stdgraph
\fR
.fi
This usage is most suitable for users whose terminal permits the text and
graphics planes to be displayed simultaneously.
.PP
In the second case the image cursor can be redirected to accept commands
from the standard input.
.nf
\fL
	set stdimcur = text
\fR
.fi
Each time the cursor is read the user will see a prompt of the 
following form,
.nf
\fL
        Image cursor [xcoord  ycoord  wcs]  key [cmd]:
\fR
.fi
where \fIxcoord\fR and \fIycoord\fR are the coordinates
of the object of interest, \fIwcs\fR is the world coordinate system
which in this case is always 1, \fIkey\fR is a single character and
\fIcmd\fR is an APPHOT command.
To perform the default action of the task, the user would respond as
follows.
.nf
\fL
	Image cursor [xcoord ycoord wcs] key [cmd]: 36. 42. 1 
\fR
.fi
In IRAF version 2.5 all the cursor command fields must be typed.
The square brackets indicate those fields which are optional under version 2.6.
Users with SUN workstations may wish to combine the IMTOOL coordinate
list cursor readback facilities with this mode of running APPHOT interactively.
.PP
Finally under version 2.5 the user should make sure that the task parameter
"display" is changed from its default value of \fIstdimage\fR to
\fIstdgraph\fR or to the null string with a \fBcl\fR command as shown below
or by using
the \fBepar\fR task.
.nf
\fL
	\fIapphottask\fL.display=stdgraph

	or

	\fIapphottask\fL.display=""
\fR
.fi
.NH 2
Running APPHOT Interactively from a Contour Plot
.PP
In this mode of operation the user makes a contour plot of the
image containing the objects to be measured. The contour parameters
must be adjusted until it is easy to see the objects of interest.
The user may wish to copy the final contour plot into a metacode file
for later recall by the cursor mode \fB:.read\fR command.
When the desired APPHOT task is executed, the graphics cursor can be moved to
the objects of interest and the objects can be measured.
.NH 2
Running APPHOT Interactively from a List File
.PP
If the user can generate a coordinate list of suitable format, APPHOT
tasks can be run without a contour plot. The "coords" parameter in
each task should be set to the coordinate file name. The cursor commands
\fB:m [N]\fR, \fB:n [N]\fR, \fBl\fR and \fBr\fR can be used to select objects
from the list.
.NH 2
Cursor Commands
.PP
The APPHOT tasks have been designed so that the same keystroke command
performs the same function in each task. A few brief notes may aid
in understanding. A \fB?\fR will print out the list of keystrokes and :commands.
A \fB:show\fR will always print out the entire list of parameters for the task.
The \fBi\fR key allows interactive setup of the parameters in most APPHOT
tasks. The current parameters in memory can be written out to the
appropriate pset files for later use with the \fBw\fR key.
The \fBspace bar\fR keystroke will perform the default action for the task.
For example, in the \fBcenter\fR task, tapping the space bar will compute the
center for the current
object whereas in \fBfitsky\fR tapping the space bar will compute the local sky
value. The \fBf\fR key performs
the same function as the space bar but does not write any records to the
output file. This
permits trial and error experimentation with the parameters without
generating a lot of junk records.
.NH 2
Running APPHOT in Batch Mode
.PP
This is currently the easiest way to run APPHOT programs. The user needs
to generate a coordinate list for the image with \fBdaofind\fR,
\fBrgcursor and a contour plot\fR or with \fBimtool\fR on the SUN,
set the task "coords" parameter
to the appropriate file name, set the task "interactive" parameter to no,
and run the task in background. The answers will appear in the appropriate
output file.
.NH 2
APPHOT Output
.PP
APPHOT tasks write their output to text files. At the beginning of each
file is a list of the current values of the task parameters.
The data records follow. A change to a parameter will generate a 1
line entry in the output file.
If the name of the output file is not specified no output file is
written. Note that this is the default for the \fBradprof\fR task.
If output is set to "default" then an output file name
is created based on the image name. See the appropriate manual
pages for details.
.PP
Individual records and fields can be selected from the output file and
piped to a new output file by running the \fBapselect\fR task.
.NH
APPHOT and IRAF Version 2.5 Bugs
.PP
The IRAF version 2.5 bugs which affect APPHOT are listed below.
.IP [1]
A bug exists in the pset handling routines
in IRAF version 2.5. The user \fImay\fR see segmentation violation errors on
Unix systems or access violation errors on VMS systems
when he/she attempts to run a pset task.
The problem occurs
most frequently immediately after the APPHOT package is loaded and can be
cured by typing \fBflpr\fR to flush the user's process cache or by
running \fBepar\fR on the pset task.
.IP [2]
When the image cursor has been redirected to the standard input,
the user must type all the fields of the cursor mode command as described
in \fBsection B3.3\fR of this document.
Under version 2.6 only the key field is necessary and other fields which
which are not required for the command are ignored.
.IP [3]
In IRAF version 2.5  the \fBgopen\fR procedure is unable to detect the fact
that the image display kernel is non-existant.
APPHOT programs which  subsequently attempt to access 
the display device will generate the following error and abort.
Failing to redefine the environment variable \fIstdimcur\fR will
produce the identical error.
.nf
\fL
    "cannot open connected subprocess x_stdimage.e" 
\fR
.fi
If this error is encountered at any point when running APPHOT tasks the
user should check that the value of the environment variable "stdimcur"
and the value of the APPHOT tasks parameter "display" have been redefined
as described in \fBsection 3.3\fR of this document.
