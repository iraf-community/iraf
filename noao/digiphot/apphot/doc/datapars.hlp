.help datapars Dec92 noao.digiphot.apphot
.ih
NAME
datapars -- edit the data dependent parameters
.ih
USAGE
datapars
.ih
PARAMETERS
.ls scale = 1.0
The scale of the image in user units, for example seconds of arc per pixel.
All APPHOT distance dependent parameters are expressed in units of scale,
and if scale = 1.0, all these parameters are in units of pixels.
APPHOT users should leave scale set to 1.0 unless they
wish to compare their aperture photometry results, with published results
in the literature.
.le
.ls fwhmpsf = 2.5 (scale units)
The full-width at half-maximum of the point spread function in scale units,
for example arc-seconds.
Certain tasks, for example DAOFIND, FITPSF and WPHOT, and the "gauss" and
"ofilter" centering
algorithms depend critically on the value of fwhmpsf.
APPHOT users can either determine fwhmpsf using an external task such
as IMEXAMINE, or make use of the interactive
capabilities of the APPHOT tasks to set and store it.
.le
.ls emission = yes
The features to be measured are above sky. By default the APPHOT package
considers all features to be emission features. However
all the package tasks will operate on absorption features if
emission is set to no.
.le
.ls sigma = INDEF
The standard deviation of the sky pixels.
APPHOT users should set sigma to a value
which is representative of the noise in the sky background.
.le
.ls datamin = INDEF
The minimum good pixel value, which defaults to -MAX_REAL, the minimum
floating point number supported by the host computer.
APPHOT users should set this parameter if they wish to remove bad data from the
sky pixel distribution before the sky is fit, or if they wish to detect stars
with bad data in the photometry apertures.
.le
.ls datamax = INDEF
The maximum good pixel value, which defaults to MAX_REAL, the maximum
floating point number supported by the host computer.
APPHOT users should set this parameter if they wish to detect
saturated stars or stars with bad data in the photometry apertures.
.le
.ls noise = "poisson"
The noise model used to estimate the uncertainties in the computed APPHOT
magnitudes. The options are the following:
.ls poisson
Poisson statistics in the object as well as the sky
background are used to estimate the error in the object measurement.
There are two components to the sky  noise
measurement, the sky noise in the object aperture and the mean error in the
computed sky value.
.le
.ls constant
The standard deviation of the sky background is used to estimate the
error in the object measurement.  There are two components to the error
estimate, the sky noise in the object aperture and the mean error in the
computed sky value.
.le

In general APPHOT users should stick to the Poisson model.
APPHOT users should also be aware that one or other of the parameters
gain or epadu
must be set correctly in order to compute the magnitude errors correctly.
.le
.ls ccdread = ""
The image header keyword defining the readout noise parameter whose
units are assumed to be electrons.
.le
.ls gain = ""
The image header keyword defining the gain parameter whose
units are assumed to be electrons per adu.
.le
.ls readnoise = 0.0
The readout noise of the image in electrons.
APPHOT users should set this parameter or the ccdread parameter to its
correct value before
running any of the APPHOT tasks.
.le
.ls epadu = 1.0
The gain in electrons per adu.
APPHOT users should set this parameter or the gain parameter to its
correct value before
running any of the APPHOT tasks, in order to insure that the 
magnitude error computation is correct.
.le
.ls exposure = ""
The image header exposure time keyword. The time units are arbitrary but
must be consistent for any list of images whose magnitudes are to be compared.
The computed magnitudes are normalized to 1 timeunit.
Setting this parameter can save APPHOT users a lot of unnecessary zero 
point corrections in future reduction steps.
The value of exposure
is recorded in the APPHOT output file headers.
.le
.ls airmass = ""
The image header airmass keyword.
This parameter
does not affect the computations in any way, but the airmass values stored
in the output files can be used in future reductions steps.
The value of airmass
is recorded in the APPHOT output file headers.
.le
.ls filter = ""
The image header filter id keyword.
This parameter
does not affect the computations in any way, but the filter id values stored
in the output files can be used in future reductions steps.
The value of filter
is recorded in the APPHOT output file headers.
.le
.ls obstime = ""
The image header time of observation keyword.
This parameter
does not affect the computations in any way, but the time of observation
values stored
in the output files can be used in future reductions steps.
The value of
obstime is recorded in the APPHOT output file headers.
.le
.ls itime = 1.0
The exposure time for the image in arbitrary units.
The magnitudes are normalized to 1 timeunit  using the value of exposure
in the image header if present, if not  the value of itime.
The value of itime used is stored in the APPHOT output files.
.le
.ls xairmass = INDEF
The value of the airmass which by default is undefined.
The airmass is set using the value of airmass
in the image header if present, if not or the value of xairmass.
The value of xairmass does not affect the computations in any way but is
stored in the APPHOT output files.
.le
.ls ifilter = "INDEF"
The value of the filter id string which by default is undefined.
The filter id is set using the value of filter
in the image header if present, if not the value of ifilter.
The value of ifilter does not affect the computations in any way but is
stored in the APPHOT output files.
.le
.ls otime = "INDEF"
The value of the time of observation string which by default is undefined.
The time of observation is set using the values of obstime in
the image header if present, if not the value of otime.
The value of otime does not affect the computations in any way but is
stored in the APPHOT output files.
.le
.ih
DESCRIPTION
\fIDatapars\fR sets those parameters which are image data dependent.
These parameters are functions, of the instrument optics,
the noise
characteristics and range of linearity of the detector, and the
observing conditions. The remaining centering, sky
fitting, and photometry algorithm parameters in the CENTERPARS,
FITSKYPARS and PHOTPARS  parameter sets scale with the data
dependent parameters.

The parameter \fIscale\fR sets the scale of the apertures used by the
centering, sky fitting and photometry algorithms.  Scale converts
distance measurements in pixel units to distance measurements in
scale units. The APPHOT parameters, cbox, maxshift,
rclean and rclip
in the CENTERPARS parameter set, annulus, dannulus, and rgrow in
the FITSKYPARS parameter set, and apertures in the PHOTPARS
parameter set are expressed in units of the scale. The scale parameter is useful
in cases where the observations are to be compared to published
aperture photometry measurements in the literature.

The parameter \fIfwhmpsf\fR defines the full-width at half-maximum of the
stellar point spread function.
Most APPHOT tasks and algroithms do not use this
parameter. The exceptions are the DAOFIND task, the centering algorithms
"gauss" and "ofilter", the FITPSF task, and the WPHOT task.

The parameters \fIscale\fR and \fIfwhmpsf\fR may be set so as to define
all distance measurements in terms of the half-width at half-maximum
of the stellar point spread function.
If the user, defines
the image scale parameter in units of the number of half-width at
half-maximum per pixel, sets
the fwhmpsf parameter to 2.0, sets remaining scale dependent centering, sky
fitting and photometry algorithm parameters in the CENTERPARS,
FITSKYPARS and PHOTPARS  parameter sets to
appropriate values in units of the half-width at half-maximum of the
point-spread function, then,
once an optimum set of algorithm parameters is
chosen, the user need rarely alter anything but the DATAPARS
scale parameter before executing any APPHOT task.

If  \fIemission\fR is "yes, the features to be measured are above sky.  By
default the APPHOT package considers all features  to  be  emission
features.  In most cases APPHOT  users  should leave this parameter set
to "yes".

The parameter \fIsigma\fR provides an estimate of the standard deviation of
the sky background pixels. The star finding algorithm in DAOFIND uses sigma
and the \fIfindpars.threshold\fR parameter to define the detection threshold
in adu. The centering algorithms uses sigma,
1) and the \fIcenterpars.kclean\fR parameter to define deviant pixels
if \fIcenterpars.clean\fR is
enabled, 2) to estimate the signal to
noise ratio in the centering box, and 3) the \fIcenterpars.cthreshold\fR
parameter
to define a lower intensity limit for the pixels to be used for centering.
If sigma is undefined or <= 0.0
no cleaning is performed regardless of the values of centerpars.clean,
the noise in the centering box is assumed to be 0,
and default cutoff intensity is
used for centering. The sky fitting algorithms "histplot", "centroid",
"gauss", "crosscor", and "ofilter" use sigma
to compute the width and resolution of the sky pixel histogram through the
parameters \fIfitskypars.khist\fR and \fIfitskypars.binsize\fR. If sigma
is undefined each object will have a sky histogram with an extent
and resolution dependent on the standard deviation of the pixels in the
local sky.

The \fIdatamin\fR and \fIdatamax\fR parameters define the range of good
data.
For example datamin and datamax can be used to define the range
of counts over which the detector is linear.
Bad pixels in the
centering subraster and in the photometry apertures are noted, the
measurement tagged with an error code, and the aperture photometry
magnitudes set to INDEF. In the case of sky fitting,
bad data is removed before the sky fit is performed.
APPHOT users should set datamin and datamax to appropriate values
before running the APPHOT tasks.

Two noise models are available. If \fInoise\fR = constant, the total noise
is assumed to be due to noise in the sky background alone. If \fInoise\fR =
poisson, the total noise includes Poisson noise from the object and the 
sky noise. 

The two parameters \fIgain\fR and \fIepadu\fR define the image gain.
The gain parameter specifies which keyword in the
image header contains the gain value. If gain is undefined or
not present in the image header, the value of epadu is used.
Epadu must be in units of electrons per adu.
APPHOT users should set either gain or epadu before running any 
APPHOT tasks to insure the magnitude error computations are correct.

The two parameters \fIccdread\fR and \fIreadnoise\fR define the image
readout noise.
The ccdread parameter specifies which keyword in the
image header contains the readout noise value. If ccdread is undefined or
not present in the image header the value of readnoise is used.
Readnoise is assumed to be in units of electrons.
APPHOT users should set either ccdread or readnoise before running any 
APPHOT tasks to insure the magnitude error computations are correct.

The magnitudes can be normalized to an exposure time of 1 timeunit using
the value of the exposure time in the image header parameter 
\fIexposure\fR or \fIitime\fR. If exposure is undefined or not present
in the image header the value of itime
is used. Itime is assumed to be in arbitrary units.
Setting either exposure or itime can save APPHOT users a lot of
unnecessary zero point corrections in future reduction steps.

The two parameters \fIairmass\fR and \fIxairmass\fR define the airmass
of the observation. The airmass parameter specifies which keyword in the
image header contains the airmass value. If airmass is undefined or
not present in the image header the value of xairmass is used.
The airmass values are not used in any APPHOT 
computations, however their presence in the APPHOT output files can
greatly simplify future reduction steps. 

The two parameters \fIfilter\fR and \fIifilter\fR define the filter
of the observation. The filter parameter specifies which keyword in the
image header contains the filter id. If airmass is undefined or
not present in the image header the value of ifilter is used.
The filter id values are not used in any APPHOT 
computations, however their presence in the APPHOT output files can
greatly simplify future reduction steps. 

The two parameters \fIobstime\fR and \fIotime\fR define the time 
of the observation (e.g. UT). The obstime parameter specifies which keyword
in the image header contains the time stamp of the observation. If obstime is
undefined or not present in the image header the value of otime is used.
The time of observations values are not used in any APPHOT 
computations, however their presence in the APPHOT output files can
greatly simplify future reduction steps. 

.ih
EXAMPLES

1. List the data dependent parameters.

.nf
	ap> lpar datapars
.fi

2. Edit the data dependent parameters.

.nf
	ap> datapars
.fi

3. Edit the DATAPARS parameters from within the PHOT task.

.nf
    da> epar phot

	... edit a few parameters

	... move to the datapars parameter and type :e

	... edit the datapars parameters and type :q

	... finish editing the phot parameters and type ^Z
.fi

4. Save the current DATAPARS parameter set in a text file datnite1.par.
This can also be done from inside a higher level task as in the
above example.

.nf
    da> datapars

	... edit a few parameters

	... type ":w datnite1.par"  from within epar
.fi

.ih
TIME REQUIREMENTS

.ih
BUGS

.ih
SEE ALSO
epar,lpar,center,fitsky,phot,wphot,polyphot,radprof,fitpsf,daofind
.endhelp
