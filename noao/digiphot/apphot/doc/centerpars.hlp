.help centerpars Dec92 noao.digiphot.apphot
.ih
NAME
centerpars -- edit the centering algorithm parameters
.ih
USAGE
centerpars
.ih
PARAMETERS
.ls calgorithm = "centroid"
The centering algorithm to be employed.
The "gauss" and "ofilter" options
depend critically on the estimate of the fwhmpsf parameter in the
DATAPARS task.
The centering options are:
.ls none
The initial positions are assumed to be the true centers. The user may
wish to use this option to save time if the DAOFIND task which computes
accurate centers was used to detect objects.
.le
.ls centroid
The object centers are determined by computing the
intensity weighted means of the marginal profiles in x and y.
This is the recommended algorithm for APPHOT users.
.le
.ls gauss
The object centers are computed by fitting a Gaussian of fixed fwhmpsf,
specified by the DATAPARS fwhmpsf parameter, to
the marginal profiles in x and y using non-linear least squares techniques.
.le
.ls ofilter
The object centers are computed using optimal filtering techniques,
a triangular weighting function of half width equal to fwhmpsf, as
specified by the DATAPARS fwhmpsf parameter, and
the marginal distributions in x and y.
.le
.le
.ls cbox = 5.0  (scale units)
The width of the subraster used for object centering in units of the
scale parameter. Cbox needs to be big enough to include a reasonable
number of pixels  for center determination but not so large so as to include
a lot of noise.
.le
.ls cthreshold = 0.0 (sigma units)
Points cthreshold * sigma counts above (emission features) or below
(absorption features) the estimated data minimum or maximum values respectively
are used for centering.
APPHOT users should leave this value at 0.0 which invokes the appropriate
default thresholding technique for each centering algorithm. Setting cthreshold
to INDEF turns off thresholding altogether for all the centering algorithms.
.le
.ls minsnratio = 1.0
The minimum signal to noise ratio for object centering. If
the estimated signal to noise ratio is less than this number the
computed center will be returned with an error flag.
.le
.ls cmaxiter = 10
The maximum number of iterations performed by the centering algorithm.
All the centering algorithms use this parameter.
.le
.ls maxshift = 1.0  (scale units)
The maximum permissible shift of the center with respect to the initial
coordinates in units of the scale parameter.
If the shift produced by the centering algorithm is
larger than this, the computed center is returned with an error flag.
.le
.ls clean = no
A switch to determine whether or not symmetry-cleaning is to
be performed on the image subraster before centering.
APPHOT users should in general leave this switch set to "no".
.le
.ls rclean = 1.0  (scale units)
The cleaning radius for the symmetry-clean algorithm in units of
the scale parameter.
.le
.ls rclip = 2.0  (scale units)
The clipping radius for the symmetry-clean algorithm in units of
the scale parameter.
.le
.ls kclean = 3.0  (sigma)
The number of sky background standard deviations for the symmetry-clean
algorithm.
.le
.ls mkcenter = no
Mark the fitted object centers on the displayed image?
.le
.ih
DESCRIPTION

The centering algorithm parameters control the action of the centering
algorithms.  The default
values have been chosen for efficiency and to give reasonable results in
the majority of cases.
Note that many of the centering parameters scale with two quantities which
are data dependent, the scale of the image,
\fIscale\fR, and the standard deviation of the sky pixels \fIsigma\fR.
Both of these quantities are parameters in the DATAPARS task.

Using an initial position and \fIscale\fR supplied by the user,
a subraster of data
\fIcbox\fR / \fIscale\fR pixels wide around the initial position
is extracted from the IRAF image.
If scale is defined in terms of the half-width half-maximum
of the psf then a single value of cbox once chosen 
will work well for centering objects in images of different seeing and
detector characteristics.

The symmetry-clean algorithm may be optionally applied
to the image subraster prior to centering. The cleaning algorithm attempts
to correct defects in the image subraster by assuming that the image has radial
symmetry and comparing pixels on opposite sides of the center of symmetry.
The center of symmetry is assumed to be the maximum pixel in the subraster.
However if the maximum pixel
is more than \fImaxshift / scale\fR from the initial center, the initial
center is used as the center of symmetry.  Pixels which are inside the
cleaning radius are not edited.
Pairs of pixels in the cleaning region, r > \fIrclean / scale\fR
and r <= \fIrclip / scale\fR
and diametrically opposed about the center of symmetry are tested for
equality.  If the difference between the pixels
is greater than \fIkclean * sigma\fR, the larger value is replaced by the
smaller.  In the cleaning region the sigma is determined by the
noise model assumed for the data.
Pairs of pixels in the clipping region, r > \fIrclip / scale\fR
are tested in the same manner
as those in the cleaning region. However the sigma employed is the sigma
of the sky background. APPHOT users should leave clean
set to "no".

New centers are computed using the centering algorithm specified by
\fIcalgorithm\fR, the data specified by \fIcbox / scale\fR, and points
that are some threshold above (below) an estimate of the local minimum
(maximum). 
Values for \fIcthreshold\fR of 0.0, a positive number, and INDEF
invoke the default thresholding algorithm, a threshold equal to the
local minimum (maximum) plus  (minus) \fIdatapars.sigma * cthreshold\fR,
and a threshold exaclty equal to the local minimum (maximum) respectively.
Next the signal to noise ratio of the subraster is estimated. 
If the SNR < \fIminsnratio\fR, the new center is still computed but an error
flag is associated with that object.

The default algorithm is \fIcentroid\fR. This centering algorithm
computes the marginal distributions in x and y of the extracted subraster.
The intensity weighted mean and mean error of the x and y marginal
distributions are computed using only points in the marginal array
above (below) the minimum (maximum) data pixel plus (minus) a threshold value
which is either the mean, \fIdatapars.sigma * cthreshold\fR above (below) 
the local minimum (maximum) if \fIcthreshold\fR is greater than zero, or
zero above (below) the local minimum (maximum) if \fIcthreshold\fR is
INDEF.
This algorithm is similar to that used in KPNO MPC (Mountain Photometry Code).
Note that this is the only centering algorithm for which the choice of
\fIdatapars.fwhmpsf\fR is not critical.
The centering algorithm \fIgauss\fR computes the new
centers by fitting a 1D Gaussian function to the marginal distributions
in x and y using a fixed \fIdatapars.fwhmpsf\fR.
Initial guesses for the fit parameters are made from the data
values. The routines then iterate until a best fit solution is achieved.
The final choice \fIofilter\fR employs a variation of the optimal filtering
technique in which the profile is simulated by a triangle function of
width \fIdatapars.fwhmpsf\fR. The default thresholding algorithm for
all centering algorithms other than "centroid" is no thresholding.
More detailed descriptions of all the centering algorithms
can be found in the APPHOT specifications document.

If the computed shift
in either coordinate > \fImaxshift\fR / \fIscale\fR, the new center is
returned but an error flag is set.

.ih
EXAMPLES
1. List the centering parameters.

.nf
	ap> lpar centerpars
.fi

2. Edit the centering parameters

.nf
	ap> centerpars
.fi

3. Edit the CENTERPARS parameters from with the PHOT task.

.nf
    da> epar phot

	... edit a few phot parameters

	... move to the centerpars parameter and type :e

	... edit the centerpars parameters and type :wq

	... finish editing the phot parameters and type :wq
.fi

4. Save the current CENTERPARS parameter set in a text file ctrnite1.par.
This can also be done from inside a higher level task as in the
previous example.

.nf
    da> centerpars

	... edit the parameters

	... type ":w ctrnite1.par"  from within epar
.fi

.ih
BUGS

.ih
SEE ALSO
center,phot,wphot,polyphot,radprof
.endhelp
