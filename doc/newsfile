IRAF (Mar90)             V2.9 Revisions Summary             IRAF (Mar90)


                   IRAF Version 2.9 Revisions Summary
                             April 10, 1990




1. Introduction

    This document summarizes the changes in IRAF version 2.9.  This  was
primarily   a  development  release  intended  to  support  applications 
software development, hence the major changes were  in  the  programming
environment,  although  there  are important new features of interest to
general users too.  Since IRAF V2.9 is primarily a development  release,
it  is not being released on all platforms, and it is expected that many
sites will not need to upgrade until IRAF  V2.10  is  available.   Sites
interested  in  obtaining  IRAF  V2.9 should contact the IRAF project to
determine if the release is available for a particular host system.   At
the  present  time,  the  release  is  being  made available for all Sun
systems, for VAX/VMS, and for the DECstation running Ultrix.

What follows is  a  brief  description  of  some  of  the  new  features
available  in  IRAF  Version  2.9.   This  is  not  intended  to  be  an 
exhaustive list, but rather a brief summary of the major  changes  since
the  last  release  of  IRAF,  Version 2.8, released in July 1989.  More
detailed revisions  notes  are  available  in  the  system  notes  file,
iraf$local/notes.v29,  as  well as in the online revisions notes for the
various packages.

Users looking for information on a particular new  package  should  note
that  if  the  package  is  not  mentioned  in  these  release notes and
therefore is not included in IRAF V2.9, that does not  necessarily  mean
that  it  is  not available.  Most major reduction and analysis packages
are now made available for testing as user installable layered  packages
before  they are included in the standard distribution.  For information
on the available add-on packages, contact the IRAF group, or  check  the
latest IRAF Newsletter.


This revisions summary is organized as follows:

        1.  Introduction

        2.  IRAF System Revisions

        3.  IRAF Package Revisions
            3.1. Changes to the System Packages
            3.2. Glossary of New Tasks in the IRAF System Packages
            3.3. Changes to the NOAO Packages
            3.4. Modifications and Additions to Calibration Data
            3.5. Glossary of New Tasks in the NOAO Packages

        4.  Programming Environment Revisions
            4.1. Changes to the Programming Utilities
            4.2. Programming Interface Changes



2. IRAF System Revisions


2.1 IEEE to native floating point conversions

    Support  has  been  added  to  the  programming  interfaces (section
4.2.3) for  converting  between  the  IEEE  floating  point  and  native
floating   point   data   formats,  including  both  single  and  double 
precision.  The FITS programs in DATAIO  (section  3.1.1)  make  use  of
this,  allowing  floating  point  data  to  be  exchanged in FITS format
without having to convert to type integer.


2.2 World coordinate system support

    A major new VOS interface MWCS has been  added  to  support  general
world  coordinate  systems  (WCS)  and  transformations thereon (section
4.2.1).  This includes support for linear, piecewise linear  or  sampled
WCS,  and  general  nonlinear  WCS such as the tangent plane or gnomonic
projection.

If a FITS image is read into the system which has WCS information in the
header,  the  WCS  will  be retained in the IRAF image header and can be
used in coordinate transformations.  The IMAGES tasks which move  pixels
around  have been modified to edit the WCS to reflect the transformation
(section 3.1.2).  The image i/o system will automatically propagate  the
WCS  of  an  image  to a new copy of the image, and will edit the WCS as
necessary if an image section is copied (this applies to all IRAF  tasks
which  operate  upon  images).   The task RIMCURSOR in the LISTS package
has  been  rewritten  to  add  support  for  coordinate  transformations 
(section  3.1.3),  and  can be used, e.g., to read out the RA and DEC of
objects on the image display using the image cursor, if  the  image  has
the necessary WCS information in the image header.

Full  integration  of  the  new world coordinate facilities into all the
IRAF applications, e.g., the graphics tasks and the  spectral  reduction
packages,  will  take  a  year  or  longer due to the amount of software
involved.  In  V2.9  the  IRAF  spectral  packages  have  not  yet  been
converted  to use MWCS, and if MWCS is enabled it could alter the normal
behavior of these packages.  IRAF V2.9 is therefore  shipped  with  MWCS
disabled.   What  "disabled"  means is that WCS information in the image
headers is not edited to reflect operations  involving  image  sections,
or  geometric  transformations of images.  Tasks such as RIMCURSOR which
use an already existing WCS  will  still  work  whether  or  not  header
editing  is  disabled.  If the spectral tasks will not be used and it is
desired  that  world  coordinates  be  propagated  correctly  in   image 
transformations,  MWCS  header  editing  can be enabled in either of the
following ways.

The MWCS transformations are disabled by defining the variable  "nomwcs"
in  the  IRAF  environment.   To  globally  enable  MWCS  by default for
everyone  using  the  system,  edit  the  file  "hlib$zzsetenv.def"  and 
comment  out the following line as shown (you want to add the leading #,
which will be missing in the distributed version):

    #set nomwcs = yes

To enable MWCS header editing temporarily, for the current IRAF run:

    cl> reset nomwcs = no

Detailed information on the coordinate systems defined by  MWCS  can  be
obtained in the online system with the command

    cl> phelp mwcs$MWCS.hlp fi+

Additional information is also given in the help page for RIMCURSOR.


2.3 IMFORT changes

    The  IMFORT interface (host level Fortran or C interface to the IRAF
image format) has undergone the following bug fixes and enhancements:

o   A couple  of  bugs  associated  with  the  IMDIR  (image  pixel-file
    directory) feature introduced in IRAF V2.8 have been fixed.

o   Image  clobber checking has been added.  By default, if you create a
    new image and another image with the same name already  exists,  the
    image  create  will  now  return  an error code leaving the existing
    image unchanged.  To override clobber checking in  IMFORT  programs,
    restoring  the  previous behavior of the interface, define "clobber"
    in your host environment.

o   IMFORT will now  perform  a  limited  filename  translation  service
    using  the  IRAF  VOS  filename translation code.  This should allow
    most IRAF filenames to  be  used  as  input  to  host  level  IMFORT
    programs.   Full VOS filename mapping is not provided, but filenames
    containing upper case characters and multiple "."  delimited  fields
    should be translated as in IRAF programs.

o   On  systems  with  multiple architecture support (e.g., Sun, Convex)
    the FC task, used to compile and link IMFORT  programs  from  within
    the  IRAF  environment, is now a script rather than a simple foreign
    task front end to XC.  The purpose of the script is to see that  all
    the  necessary  IRAF  and  host  level  command  line  switches  and 
    environment definitions (IRAFARCH,  FLOAT_OPTION,  etc.)  are  used.
    Previously,   users   had  to  make  these  environment  definitions 
    manually, and if they forgot the IMFORT program could fail  to  link
    or execute.

o   On  most  UNIX/IRAF  systems, the host library -lU77 is now searched
    automatically by FC when an IMFORT program is linked.  This  library
    is  not  used  by any of the IRAF code, but is required to link some
    Fortran programs that might want to use IMFORT.

Users are encouraged to use FC to link their  IMFORT  programs.   It  is
possible  to  manually  link against the IRAF libraries if you know what
you are doing, but the location of the libraries and the  required  host
level   command  line  switches  vary  for  different  systems  and  for 
different architectures of a single system,  and  it  is  easy  to  make
mistakes.


2.4 MKIRAF now copies login.cl to login.cl.OLD

    On  UNIX/IRAF systems, the MKIRAF command will now copy any existing
login.cl file to login.cl.OLD,  so  that,  for  example,  you  can  more
easily  merge  any  custom  changes  back  in  after running MKIRAF.  On
VMS/IRAF systems a new file version is created, as before.


2.5 Local additions to termcap/graphcap

    The  termcap  and  graphcap  device  capability  files   have   been 
reorganized  with  a  section  at  the  top  for local additions.  It is
recommended that any locally added entries be  made  in  this  area,  to
simplify  future system updates.  The local additions can then be simply
transferred to the new version of the file when a new  version  of  IRAF
is  installed  (any  entries  which  are  modified  versions of standard
entries should always be checked to see if anything has changed  in  the
distributed version).


2.6 BIN directories now smaller

    On  systems  with  multiple  architecture  support, the architecture
save file OBJS.arc stored in the BIN directory for each architecture  is
now  maintained  as  a  compressed file.  In a typical case this reduces
the size of the file by about a factor of two, saving  1-2  Mb  of  disk
space in each BIN directory.


2.7 Various system buffers increased in size

    The  layered software support in IRAF V2.8 (extern.pkg and all that)
had a problem with very long helpdb environment  strings,  limiting  the
number  of  external  packages  which  could  be  defined.   To fix this
problem, various buffers were increased in size  all  over  the  system.
The  maximum length of an environment variable such as helpdb is now 960
characters (12 80 character lines of text).  String parameters to  tasks
can  also  be  larger, and the system is more resistant to problems when
size limits are exceeded.  Foreign task commands, OS escapes, etc.,  can
all  be  larger  now.   The  current limit on such strings is about 1024
characters, and is defined at sysgen time by the  new  system  parameter
SZ_COMMAND in hlib$iraf.h.


2.8 Shared library versions

    The  Sun/IRAF  shared  library mechanism was modified to add support
for shared library versions.  The result is that when you  install  IRAF
V2.9,  which  has  a  different  shared  library  than  V2.8,  any local
programs or other layered software linked under V2.8  will  continue  to
run,  because  both  the old V2.8 shared library and the new V2.9 shared
library  are  included  in  V2.9  (with  different   version   numbers). 
Although  old programs will continue to run with V2.9, it is recommended
that they be relinked eventually to take advantage of the many  features
and  bug  fixes  provided  by V2.9.  In the case of very large packages,
e.g., STSDAS 1.0, it may be wise to wait until the  latest  release  can
be  obtained and installed before relinking, as the old version will not
have been tested under IRAF V2.9 (which of  course,  didn't  exist  back
then).


2.9 File pager enhancements

    The  system  file  pager, used in the PAGE task, the new PHELP task,
and other places, has undergone the following enhancements.

o   The N and P keys, used to move to the next  or  previous  file  when
    paging  a  list  of  files,  now  have a dual meaning: when paging a
    single file containing multiple formfeed delimited pages,  the  keys
    will  move  to  the next or previous page in the file.  This feature
    is used in the new PHELP task  to  page  a  large  file  containing,
    e.g., all the HELP pages for a package.

o   A  limited upscrolling capability is now supported, e.g., if you hit
    the 'k' key while in the pager, the screen will be scrolled  up  one
    line  in  the  file  being paged.  This feature may not be supported
    for some terminals, in which case the entire screen  is  redrawn  at
    the new file location.
    
    
2.10 STF image kernel enhancements

    Extensive  work  has  been  done  on  the  STF  image kernel in this
release (the STF kernel allows IRAF to access the Space Telescope  image
format directly).  The changes included the following.

o   Header  file  caching.   STF  images  often  have  quite  large FITS
    headers which can be time consuming to read.  A header file  caching
    scheme  is  now  used to optimize the kernel in cases where the same
    imagefile is repeatedly accessed, e.g.,  when  successively  reading
    each  element  of  a  large  group format image.  By default up to 3
    header files will be cached; this default should be  fine  for  most
    applications.   If  necessary  the  number  of  cache  slots  can be
    changed by defining the integer  variable  "stfcache"  in  the  IRAF
    environment (the builtin maximum is 5 cached headers per process).

o   The  semantics  of the kernel regarding header updates have changed.
    STF images differ from other IRAF images in that  they  may  consist
    of  a  group  of  images  all in the same file, with each individual
    image having its own  header  (the  group  header),  plus  a  single
    global  FITS  header  shared by all images in the group.  This is no
    problem in a read operation, but in  a  write  or  update  operation
    there  can  be  problems  since  parameters  cannot  be  added to or
    deleted from  the  individual  group  headers.   The  new  semantics
    regarding  STF image header updates are as follows: 1) when updating
    the header of a multigroup image (not recommended)  only  the  group
    header  is  updated, and attempts to add new parameters are ignored;
    2) when updating the header of an image containing a  single  group,
    both the group header and the FITS header are updated.
    
    As  a  result  of  these changes, the behavior of a single group STF
    image is now identical to that of  a  regular  IRAF  image.   It  is
    recommended  that  multigroup  STF images be treated as read only if
    possible, creating  only  single  group  images  during  interactive
    processing  (except  when  running  a  program  that  is  explicitly 
    designed to create multigroup images).

o   The kernel was modified to work with the new MWCS (world  coordinate
    system)   interface.    The  image  section  transformation  is  now 
    performed by MWCS rather than by the STF kernel.

o   A number of minor changes were made to the way the  group  parameter
    block  (GPB) cards are maintained in the IRAF image descriptor.  The
    comments on GPB definition cards are  now  preserved.   Restrictions
    on the grouping of GPB cards in the header have been removed.

o   A  number  of  bugs  were  fixed and restrictions removed, e.g., the
    size of a header is no  longer  limited  to  32767  characters  (404
    lines).
    
    The  IRAF core system and NOAO science applications were extensively
    tested with both single and multigroup  STF  images  using  the  new
    kernel,  and we now feel that it is safe to use the STF image format
    with these tasks, although the regular format is preferred if  there
    is  no  special  reason to use the STF format (the regular format is
    more efficient).
    
    
2.11 QPOE (event list image format) enhancements

    The QPOE image kernel, used for event  list  data  (photon  counting
detectors,   e.g.,   X-ray  satellites  such  as  ROSAT)  underwent  the 
following changes.

o   MWCS (world coordinate  system)  support  has  been  added  (section
    4.2.2).   This  provides  a  consistent  coordinate  system despite,
    e.g., the blocking factor, rect, or image section used to  construct
    an image matrix from an event list.

o   When  opening  a  QPOE  file  as  an  IRAF image, the runtime filter
    expression used to create the image  matrix  is  now  saved  in  the
    parameter  QPFILTn  in the image header (multiple cards are used for
    long expressions).

o   Region masks of arbitrary complexity and size can  now  be  used  to
    mask   the   event  list  when  reading  time-ordered  or  unordered 
    (unindexed) event lists.  This is done using the new  PLRIO  package
    (section  4.2.5) which provides the capability to efficiently random
    access large image masks of arbitrary complexity.

o   Unmatched brackets, braces, or parentheses are now  reported  as  an
    error  by  the  filter expression parser (this can occur even with a
    valid  expression,  e.g.,  due  to  truncation  of  the   expression 
    string).   A  reference  to  an  undefined  keyword,  e.g., due to a
    spelling error, is now detected  and  reported  as  an  error.   Any
    errors  occurring  during  expression  parsing  will  now  result in
    termination of the calling task, unless caught in an error handler.

o   A number of bugs were fixed.
    
    
2.12 Changes affecting image display in VMS/IRAF

    A new  version  of  Nigel  Sharp's  UISDISPLAY  program,  for  image
display   on   VMS   systems   running   UIS,   has  been  installed  in 
"iraf$vms/uis".  An executable for an  early  version  of  the  SAOIMAGE
display  program  for  the  X  window  system,  written by Mike VanHilst
(SAO), and ported to VMS by Jay Travisano (STScI)  has  been  placed  in
the  directory "iraf$vms/x11".  An executable for a VMS version of XTERM
(the X window terminal emulator, ported to VMS by  Stephan  Jansen),  is
also  in  this  directory.   We  wanted  our VMS users to have access to
these programs, although more development work  and  testing  is  needed
before  we  can  offer good support for X window based image display and
graphics on  VMS.   A  more  comprehensive  package  providing  enhanced
capabilities should be available as an add-on later this year.



3. IRAF Package Revisions

    The  most  notable  changes  to  the  tasks in the IRAF packages are
summarized below.  Further information may be obtained  by  reading  the
help  page  for  each  task,  or  by  paging  the  revisions  file for a
particular package.  For example, to page the revisions for  the  DATAIO
package:

    cl> phelp dataio.revisions op=sys



3.1 Changes to the System Packages


3.1.1 Modifications to tasks in the DATAIO package

o   The  RFITS and WFITS tasks have been modified to add support for the
    IEEE floating point format.  The "bitpix" parameter in WFITS can  be
    set  to -32 or -64 to specify real or double precision IEEE floating
    numbers on output.   RFITS  recognizes  these  same  values  in  the
    bitpix  keyword  in  the  FITS header on input and converts the data
    accordingly.  Note that this option must be selected by the user  as
    the  defaults for writing a FITS tape have not changed.  The user is
    cautioned that support for  the  IEEE  floating  formats  is  a  new
    feature of FITS and may not be supported by all FITS readers.

o   RFITS  was  modified so that the "iraf_file" parameter can be a list
    of output images or a image root name.
    
    
3.1.2 Modifications to tasks in the IMAGES package

o   MWCS (world coordinate system) support was added to those  tasks  in
    the  IMAGES  package  which  change  the geometry of an image, i.e.,
    IMSHIFT, SHIFTLINES, MAGNIFY, IMTRANSPOSE, IMCOPY,  BLKREP,  BLKAVG,
    ROTATE,  IMLINTRAN, REGISTER, and GEOTRAN (REGISTER and GEOTRAN only
    support simple linear transformations).  If one of  these  tasks  is
    used  to  linearly  transform  an image, the world coordinate system
    (WCS)  in  the  image  header  will  be  updated  to   reflect   the 
    transformation.   Note  that  MWCS  is  disabled  by default in IRAF
    V2.9, and must be explicitly enabled to allow these  tasks  to  edit
    the image header to update the WCS (see section 2.2).

o   The  IMSTATISTICS  task  was  modified.  The "verbose" parameter was
    renamed "format" with the default being set to "yes"  (fixed  format
    with  column  labels).   Otherwise  the  fields  are printed in free
    format with 2 blanks separating the fields.  The name of the  median
    field has been changed to "midpt".

o   The  IMHISTOGRAM  task  has  a new parameter called "hist_type" that
    gives  the  user  the  option  of  plotting  the   integral,   first 
    derivative,  or  second  derivative  of the histogram instead of the
    normal histogram.
    
    
3.1.3 Modifications to tasks in the LISTS package

o   The RIMCURSOR task in the LISTS package was completely rewritten  to
    add  MWCS  support,  so  that  coordinates may be output in any user
    specified coordinate system defined by the WCS  information  in  the
    image  header of the reference image.  For example, if an image with
    a TAN projection WCS is loaded into  the  image  display,  RIMCURSOR
    may  be  used  to  print  the right ascension and declination at the
    location defined by the image cursor.  Refer to the  help  page  for
    details.
    
    
3.1.4 Modifications to tasks in the PLOT package

o   A  new graphics kernel task IMDKERN (written by Zolt Levay at STScI)
    has been added to the PLOT package.  The new graphics kernel  allows
    the  graphics output of any task to be plotted as a graphics overlay
    on the image display.  As with the other graphics kernels, this  may
    be  done  by  calling  the  IMDKERN task directly, but is more often
    done by specifying the image display (e.g.,  device  "imd")  as  the
    output  device when running a graphics task.  Refer to the help page
    for details.

o   The CONTOUR task was modified so that it could be used with  IMDKERN
    to  overlay  contour  plots on the image display.  If the parameters
    fill=yes and perimeter=no are set the  contour  plot  is  scaled  to
    fill  the  entire  device viewport and all axis and plot labeling is
    disabled.  If the  image  being  displayed  also  fills  the  entire
    device  viewport (display frame) then the contour plot will be drawn
    to the same scale as the displayed image.  Refer to  the  help  page
    for details.

o   Several  tasks  in  the PLOT package were modified to allow use with
    image  specifications  containing  brackets,  e.g.,   group   format 
    images,  QPOE  filter  expressions,  and  image sections.  The tasks
    modified were PROW, PROWS, PCOL, PCOLS, SURFACE, and CONTOUR.

o   An option was added to the PVECTOR task to output  the  vector  (cut
    through  the  image at an arbitrary angle and center) as a text file
    or image, rather than plotting the vector.
    
    
3.1.5 Modifications to tasks in the SYSTEM package

o   A new task PHELP (paged help)  was  added  to  the  SYSTEM  package.
    PHELP  is  a script task front end to HELP which collects the output
    of HELP in a scratch file  and  pages  it  with  the  system  pager,
    allowing  one  to  randomly skip around to read the help text.  Note
    that paging of all the help pages in a package is supported, e.g.,
    
        cl> phelp images.*
    
    would page all the help files for the IMAGES package.

o   The NEWS task was completely rewritten, and is now used to page  the
    revisions  summary  for the current and previous releases.  In other
    words, one can now type NEWS to find out what is new in the  current
    release.

o   The  GRIPES  task  was  modified  to  send  mail to iraf@noao.edu or
    5355::iraf.  The IRAF site administrator  may  want  to  check  this
    script for compatibility with the local mail system.
    
    
3.2 Glossary of New Tasks in the IRAF System Packages

Task       Package                   Description

imdkern    plot      Image display device (IMD) graphics kernel
news       system    Summarize what is new in the current release
phelp      system    Paged HELP: collects and pages the output of HELP
rimcursor  lists     Read image cursor position in world coordinates



3.3 Changes to the NOAO Packages


3.3.1 New NOAO Packages

    A  new  package  ARTDATA, used to generate artificial data, has been
added to the NOAO packages.  ARTDATA includes tasks for  the  generation
of  star  fields,  optionally  containing  galaxies,  and  one  and  two 
dimensional spectra as well as simple test pattern  images.   The  tasks
GALLIST  and  STARLIST  provide  many  options  for  producing  lists of
galaxies or stars that can then be used by the task MKOBJECTS to produce
output images.  The tasks MK1DSPEC and MK2DSPEC provide tools for making
artificial spectral data.  The task  MKNOISE  allows  the  user  to  add
readout  noise, poisson noise and/or cosmic ray events to new or already
existing images.   The task MKPATTERN allows the  user  to  make  images
from a choice of patterns.


3.3.2 Modifications to Existing NOAO Packages


3.3.2.1 The ASTUTIL package

o   The  task  SETAIRMASS in the ASTUTIL package was modified so that it
    now precesses the coordinates to the epoch of the observation.
    
    
3.3.2.2 The DIGIPHOT.APPHOT package

o   A new task APTEST was added  to  the  DIGIPHOT.APPHOT  package  that
    tests the execution of the package.  Output files are generated that
    the user can review.

o   Two new parameters were added to DATAPARS, "datamin" and  "datamax".
    Pixels  outside  this  range  are  rejected  from  the  sky  fitting 
    algorithms and from the non-linear least square fits in  FITPSF  and
    RADPROF.

o   An  "update" parameter was added to all of the APPHOT tasks.  If the
    "verify"  parameter  is  set  to  "yes"  and  the  task  is  run  in 
    noninteractive  mode  update=yes will update the critical parameters
    in their respective parameter sets.

o   Four new parameters, "airmass", "xairmass", "filter", and "ifilter",
    were  added to the DATAPARS task.  These parameters provide the user
    the option of having the filter  and  airmass  quantities  from  the
    image  headers to be carried over into the APPHOT database files for
    later transmission to calibration programs.

o   A new algorithm "mean" was added to the sky fitting options.

o   A setup menu mode was added to all the APPHOT tasks.  When the  user
    types  "i" in interactive mode a setup menu is presented rather than
    a fixed set of predefined commands.
    
    
3.3.2.3 The IMRED.IRRED package

o   The APSELECT task (from the APPHOT package) has been made visible.

o   The image i/o for IRMOSAIC, IRALIGN, IRMATCH1D,  and  IRMATCH2D  has
    been  optimized  so  things should run much faster.  There is now an
    option to  trim  each  section  before  insertion  into  the  output
    image.   The  actions of these tasks can now optionally be output to
    the terminal.
    
    
3.3.2.4 The IMRED.MSRED package

o   A task called MSBPLOT was added to the  IMRED.MSRED  package.   This
    task  allows  the  user to plot a range of lines in multispec images
    in batch mode.
    
    
3.3.2.5 The ONEDSPEC package

o   Several modifications were made  to  the  ONEDSPEC  package.   These
    changes  affect  all  of the IMRED packages that include these tasks
    as well.

o   The equivalent width measurement using the "e"  keystroke  in  SPLOT
    is  now  computed  using the ratio of the spectrum to the continuum.
    The  previous  approximation  is  included  in   the   logfile   for 
    comparison.

o   The  DISPERSION  task will now add CDi_j (CD matrix) keywords to the
    image header as an alternative  way  of  expressing  the  dispersion
    function.   If  the keywords W0 and WPC or CRVALn and CDELTn are not
    in the image header the tasks reading this information  for  setting
    the  wavelength  (IDENTIFY, SENSFUNC, SPLOT, and SPECPLOT) will look
    for the CDi_j keywords.  This change should have no  affect  on  the
    NOAO   applications   but   provides   compatibility   with   STSDAS  
    applications  using  the  new  MWCS  interface  provided  with  IRAF 
    version 2.9.

o   The  call  to  the  CALIBRATE  task  in the script task BATCHRED was
    modified so that the "extinct" parameter is  always  set  to  "yes".
    Since  CALIBRATE  checks to be sure the data has not been previously
    extinction corrected this simple change provides more flexibility.
    
    
3.3.2.6 The PROTO package

o   Two new tasks, IMALIGN and IMCENTROID, were added  to  the  package.
    IMCENTROID  computes a set of relative shifts required to register a
    set of images.  The  task  IMALIGN  both  computes  the  shifts  and
    aligns the images.

o   The  JOIN  task  (previously a simple script) has been replaced by a
    compiled version which removes  many  of  the  restrictions  of  the
    previous version.

o   The  IR  tasks  have  been  modified  as  mentioned  above under the
    IMRED.IRRED section (section 3.3.2.3).

o   The TVMARK task was modified to permit deletion  (the  "u"  key)  as
    well  as addition of objects to the coordinate file.  Another cursor
    keystroke, the "f" key, was  added  allowing  the  user  to  draw  a
    filled rectangle.
    
    
3.3.2.7 The TWODSPEC.LONGSLIT package

o   Tasks  in  the  TWODSPEC.LONGSLIT  package that are used for setting
    wavelength information (EXTINCTION, FLUXCALIB, and  TRANSFORM)  were
    modified for the CDi_j keywords as outlined above for ONEDSPEC.
    
    
3.4 Modifications and Additions to Calibration Data

    The  calibration  data  used  by  some of the tasks in the TWODSPEC,
ONEDSPEC, and many of the IMRED packages are kept in a directory  called
ONEDSTDS  in  noao$lib.  The current contents of this directory are best
summarized by paging through its README file, e.g.,

    cl> page noao$lib/onedstds/README


A new directory  spec50redcal  in  "noao$lib/onedstds"  has  been  added
containing  flux  information for standard stars.  The data in this list
are from Massey and Gronwall, Ap. J., July 20, 1990.


3.5 Glossary of New Tasks in the NOAO Packages

Task        Package                 Description

aptest      apphot    Run basic tests on the apphot package tasks
gallist     artdata   Make an artificial galaxies list
imalign     proto     Register and shift a list of images 
imcentroid  proto     Compute relative shifts for a list of images
mk1dspec    artdata   Make/add artificial 1D spectra
mk2dspec    artdata   Make/add artificial 2D spectra
mknoise     artdata   Make/add noise and cosmic rays to 1D/2D images
mkobjects   artdata   Make/add artificial stars and galaxies to 2D images
mkpattern   artdata   Make/add patterns to images
msbplot     msred     Batch plots of multispec spectra using SPLOT
starlist    artdata   Make an artificial star list



4. Programming Environment Revisions


4.1 Changes to the Programming Utilities


4.1.1 MKPKG changes

    The MKPKG utility can now substitute the contents  of  a  file  back
into  the  input  stream,  as  a  special  case of the macro replacement
syntax.  For example, the sequence

    abc$(@file)def

would be translated as

    abc10def

if the file "file"  contained  the  string  "10".   The  replacement  is
performed  by  inserting  the  contents  of the file back into the input
stream, replacing sequences of newlines, spaces, or  tabs  by  a  single
space, and omitting any trailing whitespace.

The  "-p  <pkg>"  argument to MKPKG, XC, and so on loads the environment
of the named package pkg, to define the package  environment  variables,
load  the mkpkg special file list, define the directories to be searched
for global include files  and  libraries,  and  so  on.   Multiple  "-p"
arguments  may  be given to load multiple package environments.  What is
new is that if pkglibs is defined in the environment  of  a  package  to
list  the  package  library directories to be searched (the usual case),
and multiple package environments are loaded,  successive  redefinitions
of  pkglibs  will  add to the list of directories to be searched, rather
than redefining  the  old  list  as  each  new  package  environment  is
loaded.   For  example, if two package environments are loaded, and each
defines its own library, both libraries will be searched.


4.1.2 Generic preprocessor

    A minor change was made to the generic  preprocessor  which  affects
how  strings such as "FOO_PIXEL" are translated.  In the usual case, the
preprocessor replaces all occurrences of "PIXEL" by  "int",  "real",  or
whatever  the  actual  datatype  is.   The  translation  is  now context
sensitive.  Rather than  translating  "FOO_PIXEL"  as  "FOO_int"  (e.g.,
"MII_PIXEL"  ->  "MII_int"),  the  type name will now be output in upper
case if the rest of the name in which it occurs is upper  case.   Hence,
a  string such as "MII_PIXEL" will now be translated as "MII_INT".  This
allows the use of generic constructs to symbolize SPP macros.


4.1.3 SPP changes

    The language constant ARB, formerly defined as 32767, is now treated
differently depending upon how it is used.  In a declaration of an array
argument, ARB is replaced in the output Fortran by  a  "*",  e.g.,  "int
data[ARB]"  becomes  "INTEGER DATA(*)".  In an executable statement, ARB
is replaced by a very large ("arbitrarily" large) integer  value,  e.g.,
to  define  a DO-loop which is to loop an arbitrary number of times.  If
ARB is mistakenly used to dimension an array which is a  local  variable
rather  than  an argument, the SPP translator will now detect and report
the error.


4.1.4 Interactive development and the process cache

    Whenever a CL task is run and the process  containing  the  task  is
already  idling in the CL process cache, the CL will now check to see if
the modify date on the process executable has changed, and  restart  the
process  if  the  executable has been modified.  For example, when doing
software development from within the CL and  a  process  is  alternately
relinked  and  tested,  the  CL  will  now automatically detect that the
process has been relinked and will run  the  new  process,  without  any
need to manually flush the process cache.


4.2 Programming Interface Changes


4.2.1 New MWCS interface (world coordinate system support)

    A  major  new  VOS  interface MWCS, providing general facilities for
linear and nonlinear world coordinate systems, has  been  added  to  the
programming  environment  and  is used in IRAF V2.9 in IMIO, IMAGES, and
other parts of the system.  MWCS  is  intended  for  use  in  scientific
applications  as  well  as  in  system  code  such  as IMIO, hence is of
potential  interest  to  anyone  developing  software  within  the  IRAF 
environment.   The  source  directory  is  "mwcs"  and  the interface is
documented in the file "mwcs$MWCS.hlp".  Users  should  be  aware  that,
although  the  new  interface  addresses the general WCS problem and has
been carefully designed, a second version of the  interface  is  planned
and the current interface is not yet a "frozen" interface.


4.2.2 QPOE interface changes

    The  QPOE  (event  list  image)  interface  has been extended to add
routines to store MWCS objects in the QPOE header.   By  default,  there
is  one  MWCS  per  QPOE  file,  stored encoded in a machine independent
binary format in a variable length array qpwcs of type opaque.  The  new
routines are as follows:

            mw = qp_loadwcs (qp)
                 qp_savewcs (qp, mw)
          mw = qpio_loadwcs (io)

The  routines  qp_savewcs  and qp_loadwcs merely save a MWCS in the QPOE
header, or load a previously saved one.  The QPIO  (event  i/o)  routine
qpio_loadwcs  is  like  qp_loadwcs,  except that it will also modify the
Lterm of the MWCS to reflect any blocking factor or "rect" specified  in
the  filtering  expression  when  the  event  list  was opened.  The new
routine is called automatically by QPF and IMIO whenever  a  QPOE  event
list  is  opened  under image i/o, making the physical coordinate system
of the image matrix the same as physical event coordinates.

The calling sequences of  the  qp_add  and  qp_astr  routines,  used  to
conditionally add or update header parameters, have been changed (so far
as we could determine very  few  programs  exist  yet  which  use  these
routines,  so  we decided to risk an interface change).  The change made
was to add a  comment  argument.   This  change  was  motivated  by  the
observation  that  people  would  not use the routines but would instead
use lower level routines, in order to be able to set the  comment  field
if the parameter has to be added to the header.


4.2.3 IEEE support routines added

    Routines  for IEEE floating to native floating conversions have been
added to the MII and OSB  interfaces.   The  new  MII  routines  are  as
follows:

        nelem = miiread[rd] (fd, spp, maxelem)
               miiwrite[rd] (fd, spp, nelem)
                 miipak[rd] (spp, mii, nelems, spp_datatype)
                 miiupk[rd] (mii, spp, nelems, spp_datatype)

The  miiread  and  miiwrite  routines  are  like their FIO counterparts,
except that they are used only with data  of  the  indicated  type,  and
perform  the  IEEE to native floating conversion (or vice versa) as part
of  the  i/o  operation.   The   miipak   and   miiupk   routines   pack 
(native->IEEE) and unpack (IEEE->native) arrays of the indicated type.

The  lowest  level  conversion  routines are the OSB routines, which are
what the MII routines use to perform the lowest level translation.

                 ieepak[rd] (datum)
                 ieeupk[rd] (datum)
                ieevpak[rd] (native, ieee, nelem)
                ieevupk[rd] (ieee, native, nelem)
             iee[sg]nan[rd] (NaN)

The ieepak and ieeupk  routines  transform  a  single  scalar  value  in
place,  while  the  ieevpak and ieevupk routines transform vectors (note
that  the  package  prefix  is  "iee",  not  "ieee").   In-place  vector 
conversions  are  permitted.   Since  IRAF  does  not  support  the IEEE
not-a-number formats, NaN, Inf etc. values  are  converted  to  a  legal
native  floating  value  on  input.   The native floating value to which
NaNs are mapped (default zero) may be globally set with ieesnan.

On some systems, e.g., the VAX, the low level conversion routines may be
written  in  assembler  or  machine dependent C.  If so, the source file
actually used by the system will be found in the "host$as" directory.


4.2.4 New routine GETLLINE added to FIO

    A new routine getlline (get long line) has been added to FIO.   This
is  similar to getline, except that it will reconstruct arbitrarily long
newline delimited  lines  of  text,  whereas  getline  returns  at  most
SZ_LINE characters.

          nchars = getlline (fd, outstr, maxch)

The new routine should not be confused with the old routine getlongline,
a higher level routine which performs  a  similar  function,  but  which
also  ignores  comment  lines  and  help  blocks,  and  maintains a line
counter.


4.2.5 Modifications to PLIO/PMIO

    A new routine p[lm]_sectnotconst has been added  to  PLIO  and  PMIO
(the  pixel  list and image mask interfaces).  As the name suggests, the
routine tests whether a given rectangular section of the mask is all  at
the same value, and if so returns the mask value as an output argument.

     bool = pl_sectnotconst (pl_src, v1, v2, ndim, mval)

A  new  subpackage  PLRIO  has  been added.  This is used to efficiently
random access any 2D plane of an existing pixel list or image mask.

             plr = plr_open (pl, plane, buflimit)
                plr_setrect (plr, x1,y1, x2,y2)
          mval = plr_getpix (plr, x, y)
                 plr_getlut (plr, bufp, xsize,ysize, xblock,yblock)
                  plr_close (plr)

The mask is opened for random  access  on  a  special  descriptor  which
incorporates   a  scaled,  active  2D  lookup  table.   Most  subsequent 
plr_getpix calls will return the given  mask  value  directly  from  the
table  with very little overhead; only if the referenced pixel occurs in
a region too complex to be described by a  single  table  entry  is  the
value  computed  by  direct evaluation of the mask.  A special 2D binary
recursive  algorithm  (using   pl_sectnotconst   above)   with   log2(N) 
performance  is  used  to  calculate  the  scaled  lookup  table.  These
algorithms provide efficient table  generation  and  random  mask  pixel
access even for very large masks.
IRAF (Mar90)                 V2.8 Revisions                 IRAF (Mar90)


                   IRAF Version 2.8 Revisions Summary
                             June 30, 1989




1. Introduction

    This revisions notice coincides with the release of version  2.8  of
IRAF.   The  V2.8  release  is  a general release for all supported IRAF
hosts.

The following is a  brief  description  of  some  of  the  new  features
available  in  IRAF  Version  2.8.   This  is  not  intended  to  be  an 
exhaustive list, but rather a brief summary of the major  changes  since
the  last  major release of IRAF Version 2.5 in July 1987 and subsequent
intermediate releases primarily to support Sun/IRAF:  IRAF  Version  2.6
(February  1988),  IRAF  Version 2.6+ (March 1988), and IRAF Version 2.7
(December 1988).

More detailed revisions notes are available in the system notes files in
the  iraf$doc  and  iraf$local  directories,  as  well  as in the online
revisions notes for the various packages.



2. IRAF System Revisions

    This document highlights the most  notable  revisions  made  to  the
IRAF  core  system  software  for Version 2.8.  This is only a revisions
summary; no attempt is made to provide detailed technical  documentation
for  each  revision,  nor is there any attempt to exhaustively summarize
all revisions.  A complete record of all core system revisions  will  be
found  in  the System Notes for V2.8.  Additional information on some of
the topics covered below will  be  found  in  the  various  Installation
Guides  and  Site  Manager's  Guides, and in the IRAF User and Technical
Documentation manual sets.



2.1 Copyright notice

    Subject to  AURA  and  NSF  approval,  the  IRAF  software  will  be
copyrighted  sometime  during  1989.  As a first step in this process, a
copyright notice has been added to all core system  source  files.   The
notice  reads as follows: "Copyright(c) 1986 Association of Universities
for Research in Astronomy Inc".  We will also be adding  a  file  called
COPYRIGHT  to  the  distribution  stating the terms of the copyright and
associated licensing agreement for the software.

The intent of this  action  is  solely  to  protect  the  software  from
unauthorized  commercial exploitation, and the copyright grants, or will
grant, the right to copy, modify, and  redistribute  the  IRAF  software
provided  the  original copyright notice remains intact, the software is
made available in source form, and the rights we  grant  are  passed  on
with  the  software.   We  wish to prevent others, especially commercial
firms, from copyrighting IRAF software in their own  name  and  possibly
taking  away  the rights we grant with the software.  Granting the right
to modify and redistribute IRAF  software  does  not  mean  we  want  to
encourage  people  to do so, we merely want them to have the legal right
to do so if they feel they need to.



2.2 Major system enhancements

    The information in  this  section  is  provided  primarily  for  the
benefit  of  IRAF  site managers and programmers.  The reader interested
primarily in science applications may wish to skip ahead.  Some  systems
level familiarity with the current IRAF system is assumed.


2.2.1 Layered software enhancements

    A  given IRAF installation consists of the core IRAF system, and any
number of layered software products or external packages.  The  goal  of
the  layered software enhancements introduced in V2.8 is to make layered
software products self contained  and  hence  independent  of  the  core
system  and  of  other  layered  software.  Examples of layered software
products are the NOAO packages, LOCAL, STSDAS, PROS, and so on.

The layered  software  enhancements  make  it  possible  to  install  or
deinstall  a layered product by modifying only a single file in the core
IRAF system.  The core system may be updated without  affecting  layered
software,  and  vice  versa.  Since layered products are independent and
are simple to install, IRAF can easily be  configured  with  only  those
packages  needed at a particular site.  Software developers benefit from
the layered software enhancements because the  facilities  provided  for
development  and maintenance of layered software are equivalent to those
provided  for  development  of  the  core  IRAF  system  and  the   NOAO 
packages.   User  sites  benefit because it is easy to extend the system
with LOCAL packages of their own making.

Each layered product (usually this refers to a tree of  packages)  is  a
system  in itself, similar in structure to the core IRAF system.  Hence,
there is a LIB (global system library), one or more  BINs  (binary  file
directories),  a Help database, a set of global environment definitions,
and all the sources and runtime files, all  contained  within  the  same
directory  tree.   Layered software products, in their source only form,
are portable without change to any computer which runs IRAF.


2.2.1.1 The hlib$extern.pkg file

    This is the file which is modified to install or  deinstall  layered
software  products.   To  install  a  layered  product,  one  creates  a 
directory to hold the software, restores the files to  disk,  and  edits
the  extern.pkg  file  to  tell IRAF the name of the root package of the
layered product, and where  the  root  directory  is  located.   If  the
layered  software  is  distributed  in  source only form it will also be
necessary to recompile the software, but this is a completely  automated
process.


2.2.1.2 NOAO and LOCAL packages reorganized

    As  part of the project to better support layered software, the NOAO
and LOCAL packages have been reorganized  as  layered  products.   These
packages  are  now  structurally  equivalent  to  third party (non-NOAO)
packages, except that the directory trees  are  rooted  in  IRAF.   Both
packages  are  now  self  contained,  with  their  own  LIB,  BINs, Help
database, etc., and with an entry  in  extern.pkg,  like  other  layered
products.   The  NOAO  package  serves  as  a  working example of how to
configure a layered  package.   The  reorganization  of  these  packages
should be transparent to anyone merely using the system.


2.2.1.3 The template LOCAL

    The  LOCAL  package  included  with  the distributed system has been
stripped of all NOAO site-local tasks  and  restructured  as  a  layered
product,  the  template  local.   The  template  local contains only two
sample tasks and is not intended as an end-user package, but  rather  as
a  template  to  be  copied and modified by sites to construct their own
site dependent LOCAL package.  The desire to be able to  easily  develop
and  maintain  locally  added  packages was one of the major motivations
for the layered software enhancements project, and we  hope  that  sites
will  realize the significance of this new capability and take advantage
of it.


2.2.1.4 CL now supports package level BIN directories

    Rather than assuming a  global  BIN  directory  for  all  tasks  and
packages,  the  CL  now  permits  multiple  BIN  directories,  each  BIN 
directory being associated  with  the  package  of  definition  and  all
subpackages  of  that  package  (unless they have their own BIN).  A new
BIN directory is declared with the optional argument bindir=path in  the
package statement, e.g., in a package script task.


2.2.1.5 MKPKG support for package environments

    Layered  packages  now  have  their  own  private  LIB, including an
environment definitions file (zzsetenv.def), mkpkg global  include  file
(mkpkg.inc),  and,  optionally,  a mkpkg special file list file for each
supported host system, listing files requiring  special  compilation  to
work  around host compiler bugs or whatever.  The full mkpkg environment
is formed  by  reading  the  IRAF  core  system  environment  and  mkpkg
definitions  and  include files, followed by the package definitions and
include files.  Reading of the package environment occurs only if  mkpkg
is  called  with  the "-p" flag, or if the variable PKGENV is defined in
the user's environment.

Another way of expressing this is, when using  mkpkg  within  a  layered
package,  one  must now specify the name of the layered package in order
to pick up the package environment definitions.  For example, to  update
the  MTLOCAL  package  in NOAO, one would type "mkpkg -p noao update" in
the mtlocal directory.  If this  is  not  done  compilation  errors  may
result,  or  the  exectable  may  not  be  successfully installed in the
package BIN directory.


2.2.2 Multiple architecture support

    A single IRAF system (or layered  package)  can  now  simultaneously
support   any   number  of  machine  architectures  using  multiple  BIN 
directories sharing a single machine independent  copy  of  IRAF.   Each
BIN  directory  contains  all  the object modules, object libraries, and
executables  for  a  particular  architecture.   An   architecture   can 
represent  either  a  type  of  hardware,  e.g.,  sparc, mc68020+f68881,
mc68020+ffpa, vax,  etc.,  or  a  software  distinction,  e.g.,  systems
compiled  with  different  sets of compiler flags, or different versions
of a system.  Multiple architectures are now  supported  both  for  IRAF
execution,  and  for  IRAF  based  software  development, e.g., a single
version of IRAF can now be used to develop and run  IMFORT  programs  on
both Sun-3 and Sun-4 nodes.

The only case where multiple architecture support is used at the present
time is in  Sun/IRAF,  which  is  often  installed  on  a  heterogeneous
network  of  workstations,  e.g.,  Sun-3s with various hardware floating
point options, and Sun-4s.  A single copy of  IRAF  will  be  configured
with  several  BIN directories, one for each supported architecture, and
NFS mounted on all the network nodes which will be  using  IRAF.   There
is  no reason that this feature need be restricted to use with Sun/IRAF,
however.


2.2.2.1 IRAFBIN and IRAFARCH

    Starting with IRAF V2.8, the old environment  variable  IRAFBIN  has
been  obsoleted  and  replaced  by  IRAFARCH.  On machines which support
multiple architectures, the latter defines the architecture to  be  used
for  both  IRAF  execution  and  software  development.   If  only  IRAF 
execution  is  needed  the  variable  is   optional,   with   the   best 
architecture  being  selected  automatically when the CL is started.  If
one will be doing software development (including IMFORT) it is best  to
define  the  variable  in  the  host environment before starting IRAF or
doing any host level software development.  Typical values  of  IRAFARCH
for a Sun workstation are "sparc", "i386", "f68881", and "ffpa".


2.2.2.2 System libraries moved to the BIN directory

    As  part of the revisions required for multiple architecture support
for software development, all object libraries have been moved from  the
global,  architecture independent LIB to the architecture dependent BIN,
with the LIB entries being replaced by symbolic links (in  the  case  of
Sun/IRAF).    This   should   be  transparent  to  both  end  users  and 
programmers.


2.2.2.3 New bin.generic architecture

    On Sun/IRAF systems, which are distributed configured  for  multiple
architecture  support,  the system architecture is set to generic in the
distributed system.  What this means is that all architecture  dependent
files  (objects  and object libraries) have been removed from the system
directories and archived in the file OBJS.arc in the BIN  directory  for
each  architecture.   Rebuilding  any  of the packages in a system would
require restoring the binaries  for  a  particular  architecture,  e.g.,
typing  "mkpkg  sparc" at the IRAF root would restore the sparc binaries
for the core system on a Sun/IRAF installation.   Note  that  this  only
affects  software  development  for  the  system  in  question; software
development for external  packages  or  private  user  software  is  not
affected.


2.2.3 Shared library facility

    IRAF  version 2.8 adds support for a general shared library facility
for UNIX based systems.  Although currently  only  used  with  Sun/IRAF,
this  facility  is  potentially useful for other UNIX based IRAF systems
as well (VMS/IRAF already has its own shared library facility).

What the shared library facility does is take most of  the  IRAF  system
software   (currently  the  contents  of  the  ex,  sys,  vops,  and  os 
libraries) and link it together into a special sharable image, the  file
S.e  in  each  core  system BIN directory.  This file is mapped into the
virtual memory of each IRAF process at process startup time.  Since  the
shared  image  is  shared  by all IRAF processes, each process uses less
physical memory, and  the  process  pagein  time  is  reduced,  speeding
process  execution.   Likewise, since the subroutines forming the shared
image are no longer linked  into  each  individual  process  executable,
substantial  disk  space is saved for the BIN directories.  Link time is
correspondingly reduced, speeding software development.

With the introduction of the shared library  facility,  the  disk  space
required  for  Sun/IRAF  is substantially reduced.  Due to the increased
memory  sharing  and  reduced  process  pagein  times   performance   is 
substantially  improved,  especially  on systems like the Sun/386i which
has a relatively slow SCSI disk and  often  limited  memory.   The  disk
size  of  small  programs  is  reduced  by up to a factor of ten in some
cases, e.g., an executable for a small program that was formerly 250  Kb
in  size  might  be  as small as 25 Kb if the shared library is used and
the shared image symbols are omitted at link time.



2.3 User interface changes


2.3.1 Calling IRAF tasks from the host environment

    The IRAF main and zmain were modified to  make  it  easier  to  call
IRAF  tasks  as  host  level  tasks,  i.e.,  without  having to set up a
command file and run the process with  the  standard  input  redirected.
In  the  new  scheme,  any  extra arguments given on the process command
line are passed into the IRAF main as a command  buffer  containing  the
IRAF command or commands to be run.  For example,

    cl> x_system.e netstatus

would run the command netstatus in process x_system.e.

    cl> x_system.e count "files=*.x"

would  run  the  count  task,  counting  all  ".x"  files in the current
directory.

    cl> x_system.e count "files=*.x 4>_o"

would do the same, redirecting the output at the IRAF main level to  the
file _o.

    cl> x_system.e 'directory @pars $nargs=0'

would  run  the directory task with the given parameter set, with $nargs
set to 0.  If any of the parameters to a task are omitted the task  will
query the terminal for them in the usual way, so for example

    cl> alias count "$iraf/bin/x_system.e count files="

would  make  the  IRAF  task  count available in UNIX, allowing the IRAF
template specifying the files to be counted to be either  given  on  the
UNIX  command  line, or prompted for if omitted.  Given the above alias,
one could enter a UNIX command such as

    cl> count 'cl$*.h'


This feature is available in all UNIX based versions of IRAF  V2.8,  but
did not make it into VMS/IRAF version 2.8.


2.3.2 Image packing density control (impkden)

    Some  users  have  complained about images taking up more disk space
than they have to, due to the IMIO feature  which  conditionally  blocks
image  lines to fill an integral number of disk blocks.  This can result
in more efficient image i/o but can also make a  significant  difference
in the amount of disk space consumed by an image in some cases.

IMIO  can  actually  support both block-aligned and fully packed images.
The decision is made at image creation time and is based  on  the  image
packing  density  if  image  lines  are  block  aligned.  If the packing
density is too low for a block-aligned image, a fully  packed  image  is
created  to  avoid  wasting  disk  space.   The  default minimum packing
density is 0.6, i.e., up to 40% wasted space  before  IMIO  switches  to
full packing (no wasted space).

For finer control over the packing density, the user can now specify the
optional environment variable  impkden,  the  numeric  value  being  the
mininum packing density.  For example,

    cl> set impkden = 1.0

would completely disable block-alignment of image lines in IMIO.


2.3.3 User libraries (IRAFULIB)

    It  is  now possible for the programmer (SPP or IMFORT) to specify a
private  directory  to  be  searched  at  compile  or  link  time   when 
developing  IRAF  or IMFORT programs.  This is done by defining the path
to the directory in the  user  environment  as  the  variable  IRAFULIB.
When  locating a particular file, this directory will be searched before
the IRAF system libraries are searched, hence this feature may  be  used
to  substitute  custom  versions  of files in the IRAF system libraries,
e.g., for debugging purposes.


2.3.4 New logical printer device LPR

    A new logical line printer or plotter device lpr is now supported on
all  UNIX/IRAF  systems.   This  treats  the  UNIX task lpr as a kind of
pseudo-device, leaving it up to UNIX to decide what physical  device  to
dispose  of  the  output  to.   This default is system dependent, but on
some systems can be controlled by defining the variable PRINTER  in  the
user environment.


2.3.5 Machine independent help database

    The  IRAF help task uses a precompiled binary database to speed help
keyword searching.  This file is now machine  independent,  allowing  it
to  be  generated  on  one system and included in software distributions
without having to be recompiled.  In addition, as part  of  the  layered
software  support, help now allows each external package to have its own
private help database.  The first time help is run, all  such  databases
are  read  and  linked  to produce a database containing entries for all
help modules in the core system and  all  installed  external  packages.
The  help  database  file is the file helpdb.mip in the LIB directory of
the core system and each external package.


2.3.6 Set terminal type will no longer hangup

    On systems,  e.g.,  workstations,  which  provide  virtual  terminal
windows  which  can  change  in size, IRAF may query the terminal at run
time to determine  the  screen  size.   This  query  is  performed,  for
example,  at  login  time  if  the terminal type is set to gterm or sun.
Formerly this could cause the login process to hang indefinitely  (i.e.,
until  the  user  typed  return  or  interrupt)  if the terminal did not
respond to the size query, as would happen when the  terminal  type  was
set  improperly  and  the  actual terminal ignored the query.  Thanks to
the addition  of  non-blocking  raw  terminal  i/o  in  V2.8  IRAF,  the
terminal  screen  size query will now time out with a warning message to
reset the terminal type, if the terminal does not respond to  the  query
within several seconds.


2.3.7 Installing a new version of IRAF obsoletes old user parameter files

    The  problem  of  old,  obsolete  user (uparm) parameter files being
used with a newly  installed  version  of  IRAF,  which  could  lead  to
"parameter  not  found" error aborts, has been fixed.  The CL now checks
the date of the file utime in HLIB, and refuses to use  the  user  pfile
if  it is older than either utime or the package pfile provided with the
new system.  The contents of old user pfiles are  merged  into  the  new
system  pfile,  as before, preserving learned parameter values even when
the user pfile is obsolete.


2.3.8 @file list bug fixed

    The problem of the "@file" (at-file-list) syntax  not  working  when
the file in question was not in the current directory has been fixed.



2.4 Programming interface changes


2.4.1 IMFORT pixel directory control

    IMFORT  has  been modified to permit specification of the pixel file
directory by the calling  program.   The  modifications  are  completely
upwards   compatible,  i.e.,  existing  programs  linked  with  the  new 
interface will still create pixel files in the  same  directory  as  the
header file, with "HDR$" in the image header.

The  Fortran  programmer may set or query the pixel file directory using
the following routines:

    imsdir (dir)            # set pixel directory pathname
    imgdir (dir)            # get pixel directory pathname

where dir is a Fortran character variable.  The value should  be  either
"HDR$"  (the default) or a concatenatable host directory pathname (i.e.,
trailing / required for unix).  Once set, the pixel  directory  will  be
used  for  all  subsequent  image  create  or  rename  operations by the
calling process.

For example,

    call imsdir ("/tmp3/pixels/")
    call imcrea (image1, axlen, naxis, dtype, ier)
    call imcrea (image2, axlen, naxis, dtype, ier)

If desired the default pixel directory may  be  specified  in  the  host
environment  as  imdir or IMDIR before running the program.  IMFORT will
check the host  environment  for  this  environment  variable  then  use
"HDR$" as the default if no host definition is found.

Note  that although this is similar to setting the value of imdir in the
IRAF environment, IMFORT programs are not part of the  IRAF  environment
and  are  not affected by changes to the IRAF imdir.  Also, since IMFORT
is a host level facility and  IRAF  networking  is  not  supported,  the
network  prefix  (e.g., "node!") is omitted from the pixelfile pathname,
and since IMFORT programs are not necessarily used in  conjunction  with
IRAF,  the  ".."  (hidden file protection) files are not used to protect
against image deletion.


2.4.2 Image display interface: IMD

    A new  interface  IMD  has  been  added  to  provide  a  rudimentary
facility  for  interactive  image  display  device  control.  This is an
interim prototype interface which will be replaced by  the  new  display
interfaces when the latter become available.

The  IMD  interface  operates  by  mapping an image display device frame
buffer onto an IMIO image descriptor.   The  display  frame  buffer  may
then  be randomly edited by normal image i/o operations, e.g., to modify
subrasters of the displayed image,  or  overlay  the  image  with  color
graphics.    The   image   pixel  to  display  frame  buffer  coordinate 
transformation is supported, allowing  applications  to  work  in  image
pixel  coordinates  if  desired.  This interim interface is what is used
by the new display oriented tasks imexamine, imedit, and tvmark.


2.4.3 Image masks: PLIO, PMIO, MIO

    The following new VOS interfaces have been added in V2.8 to  provide
a general boolean or integer image mask facility.

    PLIO        pixel list i/o
    PMIO        pixel (image) mask i/o
    MIO         masked image i/o (image i/o through a mask)


PLIO   is   a   general   interface   for   storing   and   manipulating  
multidimensional integer valued rasters containing regions  of  constant
value  (i.e., masks).  The masks are stored in a highly compressed form,
the size of the compressed mask being  a  function  of  the  information
content  of  the  mask.   Both pixel array and range list i/o facilities
are provided, as well as a set  of  general  boolean  raster  operators,
e.g.,  to  extract  or  insert  subrasters,  AND  or  OR a source with a
destination, do the same through a  stencil,  draw  regions  of  various
kinds  (point, line, box, circle, polygon), and so on.  See the PLIO.hlp
file in the PLIO source directory for further information.

An  interactive  debug  program   (plio$zzdebug.x)   is   provided   for 
experimenting  with  masks.   Note  that PLIO is a stand alone interface
and is not tied in any way to  IMIO,  even  though  the  data  structure
operated upon is similar to an image matrix.

PMIO  is  very  similar  to  PLIO  except that it is used to associate a
masks with an IMIO maintained  reference  image.   Currently,  the  PMIO
mask  must  be the same resolution as the physical reference image.  All
coordinates input to PMIO are in the image section  coordinates  of  the
reference  image.   Hence,  given  a physical image and associated mask,
one can operate  upon  both  through  a  user  specified  image  section
transparently  to  the  applications  program.   This  includes all PLIO
style boolean rasterop operations, as well as mask pixel and range  list
i/o.   The PMIO interface is layered upon PLIO and IMIO, and the calling
sequences are identical with PLIO except for  the  package  prefix,  and
the addition of several new PMIO specific routines.

MIO  is  essentially  an  extension of image i/o for pixel i/o through a
mask.  The central routines are the following:

                    mio_setrange (mp, vs, ve, ndim)
    n|EOF = mio_[gp]lseg[silrdx] (mp, ptr, mval, v, npix)

One defines a rectangular region of the  image  with  mio_setrange,  and
then  sequentially  reads  or  writes  line  segments  until  all pixels
visible through the mask have been accessed.  This type  of  i/o  should
be  ideal  for  most image processing applications which need to operate
upon only those pixels visible through a region mask  (e.g.,  a  surface
fitting  task),  upon all pixels except those on a bad pixel mask (e.g.,
any analysis program), and so on.

PLIO (or PMIO) masks may be stored in binary files on  disk,  the  files
having   the  extension  ".pl".   The  V2.8  version  of  IMIO  has  the 
capability to treat such masks as if they were  images,  allowing  masks
to  be  easily  displayed, used in image expressions, converted to image
matrices and vice versa, etc.   Applications  may  do  either  pixel  or
range  list  i/o  to  a  mask image via IMIO, if MIO is not suitable for
some reason.


2.4.4 Photon images: QPOE, QPIO, QPEX

    A new set of VOS interfaces supporting photon  or  event  list  data
are  now  available.  The QPOE interface implements the Position Ordered
Event list object, which consists of a general header mechanism plus  an
event  list,  wherein  the  events are little data structures, e.g., the
attributes required to describe a photon  detection  (position,  energy,
time,  etc.).   QPOE  is designed to efficiently access very large event
lists, e.g., several hundred thousand or several million events in size.
Builtin  event attribute filtering and region filtering capabilities are
provided for selecting photons from the  event  list.   These  filtering
capabilities  may  be  combined  with the sampling capability to produce
filtered, block averaged image matrices from event lists.

The QPOE interfaces are the following:

    QPOE        header and file access and management facilities
    QPIO        raw and filtered event i/o
    QPEX        event attribute filter mechanism
    QPF         IMIO/IKI kernel for image interface to QPOE files

QPOE and QPF add  a  new  image  type  to  the  system,  with  .qp  file
extension.   Hence,  event  list data can be used as input to any of the
image processing tasks in standard IRAF, in addition to  being  analyzed
by  tasks which deal with the individual photon events.  A QPOE image is
contained in a single file.  When a QPOE file is accessed  as  an  image
the  interface  filters and samples the event list in real time, using a
user defined filter, block averaging factor, region  mask,  and  so  on,
producing  the image matrix seen by applications at the IMIO level.  The
QPOE object may be repeatedly examined with different event  filters  to
view the data in different ways.

The  QPOE  interface,  in addition to providing an event list capability
for IRAF, serves as a prototype for the  "flex-header"  portion  of  the
new  image  structures project.  Many of the capabilities to be provided
for image storage under the new image structures are already present  in
QPOE.

Further  information  is  given  in the QPOE.hlp file in the QPOE source
directory.


2.4.5 File manager: FMIO

    A new VOS library FMIO has been installed.  FMIO  is  "File  Manager
I/O",  and  is  used  to  implement  a  simple binary file manager which
maintains the  file  data  of  so-called  "lfiles"  (lightweight  files)
inside  a  single  host  binary file.  The system overhead for accessing
lfiles is much less than that of host files,  and  many  lfiles  can  be
used  to  store  a  complex  data  structure  without  cluttering a host
directory or incurring the inefficiency of accessing host  files.   FMIO
is  part  of  the  DFIO  project  and  will  serve  as  the lowest level
interface  within  DFIO;  it  is  also  used  currently  in   the   QPOE 
interface.   Additional  information  is given in the README file in the
source directory for the interface.


2.4.6 IMIO changes

    IMIO is the image i/o interface, the  standard  IRAF  VOS  interface
for managing all varieties of image data.


2.4.6.1 Mask image support

    IMIO  now  supports a new type of image, the mask image, stored as a
highly compressed binary (PLIO) file with the  extension  ".pl".   Image
masks  are  most  commonly used to store information describing selected
pixels in an associated data  image.   An  image  mask  is  logically  a
boolean  or  integer  image,  up to 28 bits deep, containing information
only on selected pixels or regions  of  pixels.   Masks  are  stored  in
highly  compressed  format,  e.g., a simple mask may be stored in only a
few hundred bytes of space.  Mask images  are  readable,  writable,  and
randomly  modifiable,  like  ordinary  raster images.  See \(sc2.4.3 for
more information.


2.4.6.2 Photon image support

    Support has also been added to IMIO for event  list  images,  stored
as  position  ordered  event  list  datafiles using the QPOE interfaces.
This new image type has the extension ".qp".  QPOE images are  read-only
under  IMIO.  Subject to that restriction, they may be accessed like any
other image by any IRAF image  analysis  program.   Accessing  an  event
list  image  as  a  raster image necessarily involves a runtime sampling
operation, wherein the events in the region of interest are  accumulated
into  an  initially zero image matrix; in the process the event list may
optionally be filtered by event attribute or event position, e.g.,

    cl> display "xray.qp[t=(30:40),pha=10,block=4]"

would display the QPOE image  xray.qp  with  a  blocking  factor  of  4,
selecting  only those events with t (time) in the range 30 to 40 and for
which pha (energy) has the value 10.  The  event  attributes  and  their
names  are user definable and may vary for different types of data.  See
\(sc2.4.4 for more information.


2.4.6.3 IMPUTH

    A new procedure imputh has been added  to  the  IMIO  header  access
library.   The  new  procedure  is  used  to append FITS like HISTORY or
COMMENT cards to the image header.


2.4.6.4 IMPARSE

    The calling sequence of the  internal  IMIO  procedure  imparse  has
changed.   Although this procedure is internal to the IMIO interface and
is  not  supposed  to  be  used  within  applications,  there   may   be 
applications  which  make  use of this procedure.  Any such applications
must be modified to  reflect  the  new  procedure  calling  sequence  or
runtime problems are guaranteed.


2.4.7 Null string environment variables

    The  semantics  of  the  VOS  procedures  envgets  and  envfind have
changed.  This could affect existing programs  and  any  programs  which
use  these  functions  should be checked to make certain they will still
work properly.

These procedures,  used  to  fetch  the  string  values  of  environment
variables, return the length of the output string as the function value.
Formerly, a value  of  zero  would  be  returned  both  when  the  named
variable  existed but had a null string value, and when the variable was
not found.  This made it impossible to discriminate between the case  of
a  variable  not  being defined, and one which is defined but has a null
value.  The routines have been  changed  to  return  the  value  ERR  (a
negative integer) if the variable is not defined.  Programs which do not
wish to make the distinction between undefined  and  null-valued  should
check  for  a function value less than or equal to zero.  Programs which
check for a function  value  equal  to  zero  will  fail  if  the  named
variable is not defined.


2.4.8 Environment substitution in filenames

    The  VOS  filename  mapping  code has been modified to add support a
powerful new  environment  substitution  syntax.   Previously  the  only
environment  substitution  mechanism available was the logical directory
facility, which  could  only  be  used  to  parameterize  the  directory
field.    The   new   facility   may  be  used  to  perform  environment 
substitution anywhere in a filename.  This is used in IRAF  version  2.8
to implement multiple architecture support, e.g.,

    cl> set bin = "iraf$bin(arch)/"

is  how  the  core  system  BIN  is  defined  in  V2.8 IRAF.  The syntax
"(arch)" tells the filename mapping code to substitute the string  value
of  the  environment  variable arch, if defined.  If the variable is not
defined the null string is substituted.  Hence, if the host system  does
not  implement  multiple  architecture  support and arch is not defined,
BIN is  defined  as  "iraf$bin/",  which  is  the  backwards  compatible
definition.   If  arch  is defined as, e.g., ".vax", then BIN is defined
as "iraf$bin.vax/".  The new feature allows use of a single  environment
variable  to  define  the  architecture, not only to form filenames, but
for other purposes as well, e.g., to generate compiler  switches  or  to
control library searching in mkpkg.


2.4.9 Nonblocking raw terminal i/o

    The  VOS  file  i/o interfaces have been modified to add support for
nonblocking terminal i/o.   This  facility  makes  it  possible  to,  in
effect,  "poll"  the terminal to see if there is any input waiting to be
read, to allow interaction without having a program block  if  the  user
has not typed anything.

The  immediate  application  of this in version 2.8 was the modification
of the stty (set-terminal) facility to implement  a  time  out  for  the
terminal  size  query.   Formerly,  stty would hang up indefinitely when
the terminal type was  set  to  "gterm"  but  the  actual  terminal  was
something different, causing the screen size query to be ignored.

In  the more general case, nonblocking terminal i/o makes possible a new
class of user interface,  which  is  not  only  interactive,  but  event
driven.   Nonblocking  i/o  makes  it  possible for an application to be
continually processing, while checking the terminal occasionally to  see
if the user has input any commands.

At  present, nonblocking i/o is always used in conjunction with raw mode
input from a terminal.  A new flag F_NDELAY,  defined  in  <fset.h>,  is
used to enable or disable nonblocking i/o.  For example,

    call fseti (fd, F_RAW, YES)

enables conventional blocking, single character raw mode reads, and

    call fseti (fd, F_RAW, YES + F_NDELAY)

enables  nonblocking  raw  mode  input  (YES,  NO,  and F_NDELAY are bit
flags).  These modes are mutually exclusive, e.g., the  first  call  may
be  issued  while  nonblocking  raw  mode is in effect to make the reads
block, and vice versa.  A call to fset(fd,F_RAW,NO)  disables  both  raw
mode  and  nonblocking mode.  Once nonblocking raw mode is in effect one
merely reads characters from  the  terminal  in  the  usual  way,  using
getc.   EOF is returned if a read is performed when no data is available
for input, otherwise the next  character  is  returned  from  the  input
queue.   Further  information  on nonblocking i/o is given in the system
notes file.


2.4.10 Function call tables (ZFUNC)

    IRAF has always had  the  ability  to  compute  the  integer  valued
address  of  a  procedure,  store that address in a table, and later use
the address as an argument to one of  the  zcall  kernel  primitives  to
call  the  addressed  procedure.  This facility has been extended by the
addition of a set of zfunc  primitives,  used  to  call  integer  valued
functions.   Only  integer  valued  functions are supported (in order to
simplify the kernel support  required),  but  in  the  systems  oriented
applications  where  procedure call tables are used, this is unlikely to
be a serious limitation.



2.5 Sun/IRAF specific revisions


2.5.1 IEEE exception handling

    By default the IEEE hardware is now configured, on all Sun  systems,
with  the invalid, overflow, and divide by zero IEEE exceptions enabled,
and with the default rounding direction and  precision  modes  (nearest,
extended)   in  effect.   This  configuration  should  ensure  that  all 
questionable floating point operations are detected, and  that  no  IEEE
"funny  numbers"  (NaN,  Inf,  etc.)  get  into the data.  These values,
since they don't behave like ordinary numbers,  can  cause  programs  to
misbehave,  e.g.,  go  into  an  infinite  loop.  In Sun/IRAF V2.8, if a
computation  results  in  an  IEEE  funny  number  being  generated,  an 
exception abort will result.  The most common example is divide by zero.

The  IRAF/IEEE  interface  offers a special debug feature that may be of
interest to programmers developing numerically sensitive  software.   If
desired,  one  can  change  the default rounding direction and precision
(e.g., to test the numerical stability of  applications)  by  using  the
debugger  to  set  a  nonzero  value  of  the variable debug_ieee before
running an executable.  The procedure for doing this  is  documented  in
the system notes file.


2.5.2 IMTOOL enhancements

    A  number  of  enhancements and bug fixes have been made for V2.8 to
the SunView  based  IMTOOL  image  display  server.   The  most  notable
changes  are summarized here; refer to the IMTOOL manual page for a more
complete description of the new features.


2.5.2.1 Software ZOOM added

    IMTOOL, which has had for some time the ability to pan  about  on  a
large  image,  now  has  the ability to zoom as well.  Both pan and zoom
are controlled very conveniently by the middle mouse button:  place  the
mouse  on an object and tape the middle button once to pan the object to
the center of the display window; tap it again and  the  image  will  be
zoomed.   Zoom,  currently  implemented  by  writing  directly  into the
hardware frame buffer,  is  very  fast,  almost  as  fast  as  a  normal
unzoomed  window  refresh.   The  default set of zoom factors is 1,2,4,8
after which the sequence wraps around to 1.  The zoom factors  are  user
configurable  via the IMTOOL setup panel; very large zoom factors, e.g.,
x64, are possible.   Dezoom  (making  a  large  image  smaller)  is  not
currently supported.


2.5.2.2 WCSDIR eliminated

    The  host  level WCSDIR environment variable, and the text file used
to communicate image coordinate (WCS) information  between  the  display
task  and the display server, have been eliminated.  All WCS information
is now passed via the datastream used to pass commands and data  between
the  client  and the display server.  This eliminates the need for users
to have to remember to define WCSDIR in  order  to  get  coordinates  in
image  units,  and  some  subtle  process  synchronization  problems are
eliminated as well.

In a related change, the frame buffer configuration index is  no  longer
passed  in  during  a  frame  erase,  hence it is no longer necessary to
erase a frame before displaying an image to ensure that a  frame  buffer
configuration  change  is passed to the server.  The configuration index
is now passed when the WCS information for a frame is set.


2.5.2.3 Graphics colors

    IMTOOL now allocates a range of pixel values  for  use  as  graphics
overlay  colors.   Setting  a  frame buffer pixel to one of these values
causes it to always be displayed with the assigned color.  The  graphics
color  values  are  not  affected  by  windowing  the display.  The most
common use of graphics colors with V2.8 IRAF  is  for  drawing  graphics
into  a  displayed  frame  with the new tvmark task, available in PROTO.
See the IMTOOL manpage for a table listing the color index assignments.


2.5.2.4 New imtoolrc entries

    Several new predefined frame buffer configurations have  been  added
to  the  default  imtoolrc.   These  include  an  128 pixel square frame
buffer (imt128), a 256 pixel square frame buffer (imt256),  and  a  full
screen display with the same aspect ratio as a 35 mm slide (imtfs35).


2.5.2.5 System crash (FIFO) bug fixed

    Versions  of  SunOS  through  at  least 4.0.1 have a bug in the FIFO
driver code which can cause the internal kernel FIFO data buffer  to  be
deallocated  while it is still in use.  This will result in a bad kernel
which will eventually panic and reboot the system.  This  is  the  cause
of  the  IMTOOL  crash  problem  which  some sites may have experienced.
IMTOOL has been modified to avoid the circumstances (repeated 4096  byte
transfers)  which cause the bug to surface.  So far as we know, the real
bug (in SunOS) has not  yet  been  fixed,  but  at  least  on  the  NOAO
systems,  the  frequency  of occurrence of the system crashes is greatly
reduced  with  the  new  version  of  IMTOOL  which   incorporates   the 
workaround for the SunOS bug.


2.5.2.6 Cursor marking now disabled by default

    When  the  interactive image cursor read facility was first added to
IMTOOL, the default response to each cursor read was  to  draw  a  small
white  dot  at  the  position  of  the  cursor.  This is convenient when
marking a series of objects to make a  list,  but  with  the  increasing
number  of IRAF programs making user of the interactive image cursor, it
has been necessary to change the default to  disable  automatic  marking
of  each  cursor read.  The cursor mark feature is still available as an
option and can be enabled via the setup panel.


2.5.2.7 Ctrl/b may be used for manual blinking

    In addition to the list of blink frames and the timed blink  feature
IMTOOL  has provided for some time, it is now possible to manually cycle
through the blink frames with the <ctrl/b> key.  Typing  <ctrl/b>  while
the  mouse  is in the image window will cause the display to display the
next blink frame in sequence.


2.5.2.8 F4 key will now toggle setup panel

    The F4 function key on the Sun keyboard may now be  used  to  toggle
whether  or  not  the  setup panel is displayed.  This provides a single
keystroke alternative to calling up the setup panel with the frame menu.



2.6 VMS/IRAF specific revisions


2.6.1 NEWUISDISP added to VMS/IRAF

    Nigel Sharp's NEWUISDISP display program,  used  for  image  display
under UIS on microvaxes with bitmapped displays, is now available in the
standard VMS/IRAF release, in the directory [IRAF.VMS.UIS].


2.6.2 New INSTALL.COM script

    A new INSTALL.COM script (also written  by  Nigel  Sharp)  has  been
added  to  VMS/IRAF.   This script, run by the system manager to install
selected IRAF executable images, will now automatically  check  for  and
deinstall  any old versions of the executables before installing the new
ones.


2.6.3 VMS 4.7/5.0

    Testing of the standard V2.8 VMS/IRAF release,  which  was  prepared
on  VMS  4.7, on a VMS 5.0 system has thus far not revealed any problems
(NOAO is still running VMS  4.7  as  our  standard  system).   Hence  it
appears  that  the  standard  V2.8 VMS/IRAF will run under VMS 5.  It is
likely, however, that any attempt to  recompile  VMS/IRAF  under  VMS  5
would  cause problems, since we have not yet tried to rebuild IRAF under
VMS 5, and such a major operating  system  upgrade  will  often  require
changes  to  the  IRAF  code.  The system may be relinked under VMS 5 if
desired, and this does not appear to cause  any  problems,  but  neither
does there appear to be any benefit to be gained from doing so.



2.7 Summary of IRAF System Packages Revisions


o   The  tasks  RFITS  and  WFITS  in the DATAIO package now support the
    reading and writing of arbitrary sized data blocks (IRAF version 2.7
    and later).

o   Several new tasks were added to the IMAGES package.  IMCOMBINE (IRAF
    version 2.6 and later) provides for the combining  of  images  by  a
    number  of algorithms.  The new task CHPIXTYPE (IRAF version 2.7 and
    later) changes the pixel types of a list of input images.  The  task
    IMSLICE  slices  images  into  images  of  one  less dimension (IRAF
    version 2.8).  The task IMSTACK  has  been  moved  into  the  IMAGES
    package (although it still resides in PROTO as well).
    
    The  IMSTATISTICS task has been rewritten and now allows the user to
    select which statistical  parameters  to  compute  and  print  (IRAF
    version  2.8).   The  IMRENAME  task  has been modified to allow "in
    place" image renames, used chiefly for moving the pixel files  to  a
    new IMDIR.
    
    Several  other  tasks  in  the  IMAGES  package  were modified (IRAF
    version 2.8).  IMSHIFT was modified to accept a list of shifts  from
    a  file.   REGISTER  and  GEOTRAN  were modified to accept a list of
    transforms instead of only a single one.  IMHISTOGRAM has  undergone
    extensive  revision  including support for "box" type plots, support
    for linear or log scaling in the y coordinate, as  well  as  support
    for antialiasing of the histogram bins.

o   All  the  tasks in the IMAGES.TV package were modified (IRAF version
    2.8) so that if a task is used with an unsupported display device  a
    message is printed to that effect.

o   The  STTY  task  in  the  LANGUAGE  package  has been improved (IRAF
    version 2.6 and later) to better facilitate its "playback"  feature.
    These  changes  have  been  documented  in  the  online help for the
    task.  This feature is little used by external sites but  can  be  a
    very useful instructional aid if users are aware of its capability.

o   A  new task PVECTOR was added to the PLOT package that allows one to
    plot an arbitrary vector in a two dimensional  image  (IRAF  version
    2.6 and later).
    
    The  task  STDPLOT  was  modified (IRAF version 2.8) so that it uses
    the more popular SGI kernel  rather  than  the  NSPP  (NCAR)  kernel
    (STDPLOT  is  now  equivalent  to  the  SGIKERN  task).   A new task
    NSPPKERN was added that uses the NSPP kernel.

o   Two new tasks were added to the SYSTEM package (IRAF  version  2.8).
    The  task  DEVICES  simply prints the dev$devices.hlp file as edited
    by the site manager listing available devices on the local  host  or
    network.   The  REFERENCES  task is used to search the help database
    for all tasks or other help modules pertaining  to  a  given  topic,
    e.g.,  references  vector  will  list all tasks that have the string
    "vector" in their one line description.
    
    
2.8 Glossary of New Tasks in the IRAF System Packages

Task         Package                     Description

chpixtype    images     Change the pixel type of a list of images
devices      system     Print information on the locally available devices
imcombine    images     Combine images pixel-by-pixel using various algorithms
imslice      images     Slice images into images of lower dimension
imstack      images     Stack images into a single image of higher dimension
nsppkern     plot       Plot metacode on a NSPP (NCAR) plotter device
pvector      plot       Plot an arbitrary vector in a 2D image
references   system     Find all help database references for a given topic

In addition, there are  new  image  display  oriented  tasks  imexamine,
imedit,  and  tvmark in the PROTO package in NOAO (used to interactively
examine and edit images, or draw graphics into  image  display  frames).
These  really  belong  in  the  core  system  but  have  been  placed in
noao.proto since they are prototype tasks.



3. NOAO Package Revisions

    Some of the major revisions to the NOAO packages are listed below.


3.1 Summary of NOAO Packages Revisions


3.1.1 New NOAO Packages

    Several new packages have been added to the NOAO suite of packages.

o   The APPHOT package  is  a  set  of  tasks  for  performing  aperture
    photometry  on  uncrowded  or  moderately  crowded stellar fields in
    either interactive or batch mode.  This package is now installed  in
    the  DIGIPHOT  package  (IRAF  version  2.7  and later).  The APPHOT
    package was available as an add-on package to IRAF version  2.5  and
    later  while  it  was  undergoing  alpha testing.  Many new features
    have been added to the  package  since  it  first  became  available
    including  the  new  task  QPHOT  (quick  aperture  photometry)  and 
    interaction with  the  image  display  cursor  for  supported  image
    displays (Sun workstation, IIS model 70).

o   The  CCDRED  package  provides  tools  for  the  easy  and efficient
    reduction of CCD images.  This package has  been  installed  in  the
    IMRED  package (IRAF version 2.6 and later).  The CCDRED package was
    also available as an add-on to IRAF version 2.5.
    
    A short demonstration of many of the tasks in the CCDRED package  is
    provided with the DEMO task in the CCDRED.CCDTEST package.

o   The   IMRED.ECHELLE   package   has   been   replaced  with  a  more 
    sophisticated collection of tasks for  reducing  echelle  type  data
    (IRAF  version  2.7 and later). The new ECHELLE package recognizes a
    new image format in which each extracted  echelle  order  becomes  a
    line  in  a  two dimensional image rather than having a separate one
    dimensional spectrum  for  each  order,  although  this  old  output
    format  is  still  available  as an option.  Several new tasks exist
    for computing and applying a  wavelength  calibration  to  the  data
    using  the  echelle  relationship  between  the  orders (ECIDENTIFY,
    ECREIDENTIFY, and ECDISPCOR) as well as  for  manipulating  the  new
    echelle format (ECSELECT, ECCONTINUUM, and ECBPLOT).

o   The  IRRED  package  has been added to the IMRED package.  The IRRED
    package collects  together  in  one  place  those  tasks  used  most
    frequently  by users reducing IR data such as that taken with the IR
    imager at KPNO.  The IRMOSAIC and IRALIGN tasks were available  with
    IRAF  version  2.6  and  later.   IRMOSAIC  takes an ordered list of
    input images and places them on a grid in an output image.   IRALIGN
    uses  this  grid  and  a coordinate list of overlapping objects from
    the individual subrasters to produce an aligned output  image.   The
    tasks  IRMATCH1D  and IRMATCH2D were available with IRAF version 2.7
    and later.  These tasks are  similar  to  IRALIGN  expect  that  the
    intensities  of  adjacent  subrasters  can  be  matched  as well.  A
    script called MOSPROC (IRAF version 2.8) has also  been  added  that
    prepares a list of images for a quick look mosaic.

o   The  MSRED  package  has been added to the IMRED package.  The MSRED
    package is a collection of tasks  used  for  reducing  multispectral
    types  of  data, e.g. fiber arrays, where the individual spectra are
    for different objects.  Like the ECHELLE package, it  also  has  its
    own  multispectral  image  format  (a two dimensional image in which
    each line is an extracted spectrum).  Several new  tasks  have  been
    added  to  the  package  for wavelength calibration of multispectral
    data.
    
    
3.1.2 Modifications to Existing NOAO Packages


o   The ASTUTIL package was reorganized (IRAF version 2.6  and  later  -
    see  IRAF Newsletter No. 3 for details) and several tasks were added
    and/or  modified.   A  new  task  ASTTIMES   computes   and   prints 
    astronomical  dates  and  times  given a local date and time.  A new
    task RVCORRECT computes and prints radial velocity  corrections  for
    an  observation.   The  tasks  PRECESS  and  GALACTIC  were modified
    slightly using different but more accurate algorithms.
    
    The new task SETAIRMASS (IRAF version 2.8)  computes  the  effective
    airmass  and  middle  UT  of  an  exposure.  This task was also made
    available in the TWODSPEC and IMRED packages.

o   The two tasks in the IMRED.BIAS package, COLBIAS and LINEBIAS,  were
    modified  slightly  (IRAF version 2.7 and later) so that the fitting
    parameters for the overscan region can be set by the user as  hidden
    parameters to the tasks.

o   The  task COSMICRAYS (from the CCDRED package) was made available in
    the IMRED.GENERIC package (IRAF version 2.6 and later).

o   A new task called SYNDICO has been added to the  IMRED.VTEL  package
    (IRAF  version  2.6  and  later). SYNDICO makes glossy prints on the
    NOAO Dicomed printer of the synoptic, full  disk,  magnetograms  and
    spectroheliograms taken at the vacuum telescope at Kitt Peak.

o   Modifications  were  made  to the IMRED.DTOI package.  These changes
    have been documented in IRAF Newsletter No. 4.

o   Three new tasks in the ONEDSPEC package, REFSPECTRA,  SEXTRACT,  and
    SPECPLOT,  were  made  available  in  the  IMRED.COUDE,  IMRED.IIDS, 
    IMRED.IRS, and IMRED.SPECPHOT packages.

o   Many new tasks and features have been added to the ONEDSPEC package.
    
    The SENSFUNC task was completely rewritten  (IRAF  version  2.6  and
    later)  to  allow  determination  of  extinction,  display  of  flux 
    calibrated  spectra,  and  many  new  features  for  displaying  and 
    manipulating the data.
    
    IDENTIFY,  REIDENTIFY  and  DISPCOR  were modified (IRAF version 2.6
    and later) so that a dispersion  solution  from  IDENTIFY  could  be
    shifted  without  changing  the  original  shape  of  the coordinate
    function (see IRAF Newsletter No. 3 for details).
    
    A new deblending algorithm was added to SPLOT (IRAF version 2.7  and
    later).   See  the  online  help for SPLOT as well as the article in
    IRAF Newsletter No. 4.
    
    The tasks in the ONEDSPEC.ONEDUTIL package were  absorbed  into  the
    ONEDSPEC package (IRAF version 2.7 and later).
    
    The  EXTINCT  task  disappeared  with  its functionality being taken
    over by a rewritten CALIBRATE (IRAF version 2.7 and later).
    
    The COEFS task was moved to the IMRED.IIDS  and  IMRED.IRS  packages
    since  this is a very instrument specific task (IRAF version 2.7 and
    later).
    
    Three new tasks were added to the package.  SEXTRACT  (IRAF  version
    2.6  and  later)  extracts  subspectra  from  one  dimensional input
    spectra.  REFSPECTRA (IRAF version 2.7 and later)  takes  over  part
    of  the functionality of the old DISPCOR task and allows the user to
    define which arc spectra are to be used in the  calculation  of  the
    dispersion  solution of object spectra.  SPECPLOT (IRAF version 2.8)
    is a new plotting task that allows the compression of  many  spectra
    to a page (see IRAF Newsletter No. 6).

o   Several new tasks have been added to the PROTO package.
    
    Four  tasks  were  added to IRAF version 2.6 and later.  BSCALE is a
    task that can  be  used  to  linearly  scale  images  by  the  mean,
    average,  or mode of the image.  IRMOSAIC and IRALIGN can be used to
    combine many frames into one large image.   These  three  tasks  are
    also  available  in the IMRED.IRRED package.  MKHISTOGRAM calculates
    the histogram of the data in a text file.
    
    Three new tasks were added to IRAF version 2.7 and  later.   IMSLICE
    is  a  task  that  slices  an  image into images of lower dimension.
    IRMATCH1D and IRMATCH2D are two tasks that allow combining  of  many
    overlapping  images while matching the background intensities in two
    different ways.
    
    Three new tasks have been added to IRAF version 2.8 that  allow  the
    user  to  interact  with  the  image  display (for supported display
    devices, ie Sun workstation, IIS model 70).   IMEXAMINE  allows  the
    user  to  interactively  examine  portions  of  the displayed image.
    TVMARK allows the  user  to  mark  objects  on  the  image  display.
    IMEDIT allows the user to interactively edit an image.

o   The  APEXTRACT  package  in  the TWODSPEC package has ungone several
    rounds of modifications, as discussed in the IRAF  Newsletters,  No.
    3  and 4.  These changes included improved techniques and additional
    options for the extraction of data.
    
    A new task, APSCATTER, has been added to the package  (IRAF  version
    2.8).   This  task determines and subtracts scattered light from two
    dimensional aperture or echelle spectra.  The  task  was  also  made
    available  from within the ECHELLE package.  This task was discussed
    in IRAF Newsletter No. 6.
    
    
3.2 Modifications and Additions to Calibration Data

    The calibration data used by some of  the  tasks  in  the  TWODSPEC,
ONEDSPEC,  and many of the IMRED packages are kept in a directory called
ONEDSTDS in noao$lib.  The current contents of this directory  are  best
summarized by paging through its README file, e.g.,

    cl> page noao$lib/onedstds/README


Two  additional  line  lists  (used by IDENTIFY) have been added to this
directory  (IRAF  version  2.8).   These  lists,   vacidhenear.dat   and 
vacthorium.dat,  are  simply  the standard .dat files in air wavelengths
converted to vacuum wavelengths.  The equation used for  the  conversion
as  well as the appropriate reference in the literature are contained in
the README file.

The thorium.dat file has been updated  to  contain  thorium  lines  from
3180  Angstroms  to 9540 Angstroms (IRAF version 2.6 and later).  Please
see the README file for the source.

Two new directories have been  added  containing  flux  information  for
standard stars (IRAF version 2.6 and later): SPECHAYESCAL and SPEC50CAL.
Both of these lists are from Massey et al., 1988, Ap. J., Vol.  328,  p.
315.


3.3 Glossary of New Tasks in the NOAO Packages

Task           Package                     Description

apscatter(1)   apextract  Fit and subtract scattered light
apselect       apphot     Extract select fields from apphot output files
asttimes       astutil    Compute UT, Julian day, epoch, and sidereal time
badpiximage    ccdred     Create a bad pixel mask image from a bad pixel file
bscale(3)      proto      Brightness scale images:  new = (old-bzero) / bscale
ccdgeometry    ccdred     Discussion of CCD coordinate/geometry keywords
ccdgroups      ccdred     Group CCD images into image lists
ccdhedit       ccdred     CCD image header editor
ccdlist        ccdred     List CCD processing information
ccdproc        ccdred     Process CCD images
ccdred         ccdred     CCD image reduction package
ccdtypes       ccdred     Description of the CCD image types
center(3)      apphot     Compute accurate centers for a list of objects
centerpars(3)  apphot     Edit the centering parameters
combine        ccdred     Combine CCD images
cosmicrays(4)  ccdred     Detect and replace cosmic rays
daofind        apphot     Find stars in an image using the DAO algorithm
darkcombine    ccdred     Combine and process dark count images
datapars(3)    apphot     Edit the data dependent parameters
demo           ccdtest    Run a demonstration of the CCD reduction package
ecbplot        echelle    Batch plots of echelle spectra
eccontinuum    echelle    Fit the continuum of echelle spectra
ecdispcor      echelle    Dispersion correct spectra
ecidentify     echelle    Identify features in spectrum for dispersion solution
ecreidentify   echelle    Automatically reidentify features in spectra
ecselect       echelle    Select and extract apertures from echelle spectra
fitpsf         apphot     Model the stellar psf with an analytic function
fitsky         apphot     Compute sky values in a list of regions
fitskypars     apphot     Edit the sky fitting parameters
flatcombine    ccdred     Combine and process flat field images
flatfields     ccdred     Discussion of CCD flat field calibrations
guide          ccdred     Introductory guide to using the CCDRED package
imedit         proto      Examine and edit pixels in images
imexamine      proto      Examine images using image display, graphics, and text
imslice        proto      Slice images into images of lower dimension
instruments    ccdred     Instrument specific data files
iralign(3)     proto      Align the mosaiced image produced by irmosaic
irmatch1d(3)   proto      Align and intensity match image produced by irmosaic
irmatch2d(3)   proto      Align and intensity match image produced by irmosaic
irmosaic(3)    proto      Mosaic an ordered list of images onto a grid
mkfringecor    ccdred     Make fringe correction images from sky images
mkhistogram    proto      List or plot the histogram of a data stream
mkillumcor     ccdred     Make flat field illumination correction images
mkillumflat    ccdred     Make illumination corrected flat fields
mkimage        ccdtest    Make or modify an image with simple values
mkskycor       ccdred     Make sky illumination correction images
mkskyflat      ccdred     Make sky corrected flat field images
mosproc        irred      Prepare images for quick look mosaicing
msdispcor      msred      Dispersion correct spectra
msreidentify   msred      Reidentify features from/to a multispec image
msselect       msred      Select and extract apertures from spectra
observe        ccdtest    Create an artificial CCD observation
phot           apphot     Measure magnitudes for a list of stars
photpars       apphot     Edit the photometry parameters
polymark       apphot     Create polygon lists for polyphot
polypars       apphot     Edit the polyphot parameters
polyphot       apphot     Measure magnitudes inside a list of polygonal regions
qphot          apphot     Measure quick magnitudes for a list of stars
radprof        apphot     Compute the stellar radial profile of a list of stars
refspectra(5)  onedspec   Assign wavelength reference spectra to other spectra
rvcorrect      astutil    Compute radial velocity corrections
setairmass(6)  astutil    Compute effective airmass for an exposure
setinstrument  ccdred     Set instrument parameters
sextract(2)    onedspec   Extract subspectra from dispersion corrected spectra
specplot(5)    onedspec   Stack and plot multiple spectra
subsection     ccdtest    Create an artificial subsection CCD observation
subsets        ccdred     Description of CCD subsets
syndico        vtel       Make dicomed print of daily grams 18 cm across
tvmark         proto      Mark objects on the image display
wphot          apphot     Measure magnitudes for a list of stars with weighting
zerocombine    ccdred     Combine and process zero level images


Notes:

(1) Tasks also in echelle and  msred packages.

(2) Tasks also in coude, iids, irs, and specphot packages.

(3) Tasks also in irred package.

(4) Tasks also in generic package.

(5) Tasks  also  in  coude,  echelle,  iids,  irs,  msred,  and specphot
    packages.

(6) Tasks also in imred and twodspec packages.
NEWS (Jul86)                  Ancient News                  NEWS (Jul86)

30 July 86      IMIO Modifications
-------------------------------------------------------------------------------

    The new IMIO interface, used by all IRAF tasks to access bulk image data
on disk, is now capabable of operating upon both the old IRAF format (OIF)
images as well as STScI SDAS/GEIS format images.  The default image type is
the OIF format.  Any existing OIF format images are readable by the new system
without change.  Although IRAF can read either OIF or STF format images,
SDAS can read only STF format images, so serious SDAS users should configure
IRAF to work with STF format images as the default.  All other users should
continue to use the OIF format images as image access is more efficient,
and the IRAF software has been extensively tested only for OIF format images.
Users of the OIF format should note that they can read a VMS BACKUP tape
(or UNIX TAR tape) containing STF format images directly to disk and immediately
access the images, without changing the default configuration of IRAF.

    The image type is specified by a filename extension; extensions for the
OIF format images are new in this release of the system.  The recognized
extensions are shown below.

        image type      header file extensions

            OIF                 .imh
            STF                 .??h    (? stands for any character)

In most cases when operating upon an image with an IRAF task the extension
can be omitted.  The most important exception occurs in image templates.
THE PATTERN GIVEN IN AN IMAGE TEMPLATE MUST FULLY MATCH THE IMAGE HEADER
FILE NAMES AS THEY APPEAR IN A DIRECTORY LISTING, i.e., the header filename
extension must be matched by the image template.  The image type extension
must also be specified to access an image which is not of the default image
type (OIF or STF), or when changing the type of an image.  For example,

        cl> imcopy dev$pix.imh pix.hhh

will make an STF format copy in the current directory of the OIF format image
"dev$pix".

The default image type is controlled by the new environment variable IMTYPE.
The string value of IMTYPE is the desired image header file extension, e.g.,
"imh" (omit the dot) for an OIF format image.  If IMTYPE is not defined the
default image type is "imh".  For STF format images there are many possible
image header extensions, and IMTYPE specifies the default type IMIO should
look for when the extension is not explicitly given, or the default extension
to use when a completely new image is to be created.  When making a new copy
of some existing image, IMIO will make a new image of the same type as the
existing input image unless an extension is given to force some other type
of image to be created.

   environment variable                 description

        IMTYPE                  the default image type (extension)
        IMDIR                   pixel storage directory for OIF images

The IMDIR environment variable defines the directory in which the pixel file
is to be placed when creating a new OIF format image.  In V2.2 and older
versions of IRAF, IMDIR could only be a logical or machine dependent directory
pathname.  The new system also recognizes the special "builtin" logical
directory name "HDR$" (must be upper case).  If the value of IMDIR is "HDR$",
IMIO will create the pixel file in the SAME directory as the header file,
rather than in some other directory.  It is also possible to place the pixel
file in some subdirectory of the header directory, e.g., "HDR$pixels/" will
cause the pixel files to go into the subdirectory "pixels".

        set imdir = "/tmp/user/"        # pixel files -> specified directory
        set imdir = "HDR$"              # pixel files -> header file directory
        set imdir = "HDR$pixels/"       # pixel files -> subdirectory of HDR$

The root filename of OIF pixel files is now the same as that of the header
file, rather than a computer generated name.  The filename extension of an
OIF pixel file is ".pix".

The STF format images support group format, a format very similar to that
used for group format FITS tapes.  IRAF users accessing an STF group format
image can specify the `group' (subimage) to be accessed by appending a
subscript to the image name, e.g.,

        cl> imstat pix.aah[3]           # access group 3
or
        cl> imstat pix.aah[3][*,100]    # line 100 of group 3

A new group format image can be created in a similar fashion, specifing the
number of groups to preallocate space for, e.g.,

        cl> imcopy dev$pix testimage[1/10]

would create a new group format image "testimage" with space for 10 groups
(subimages), and initialize group 1.  The remaining groups would then be
initialized by specifying only the group subscript "[N]".  Note that all
groups must be the same size, new groups cannot be allocated, old groups
cannot be deleted, the set of possible group parameters is fixed at creation
time, and all groups share the same FITS header.


15 June 86      System Tasks
-------------------------------------------------------------------------------

    The DIRECTORY, HELP, and PAGE system tasks have all undergone important
revisions.  The directory task has been completely rewritten and now handles
directory pathnames, etc., correctly, and in addition it has a more concise
syntax.  The HELP and PAGE tasks have been modified to replace the old "more"
boolean query mechanism (used to pause between pages of output) with a nicer
keystroke driven mechanism which offers more options and is faster.  Read the
manual pages for additional details.  The old parameter files should be
unlearned.


28 April 86     Package Reorganization
-------------------------------------------------------------------------------

    The basic package structure of IRAF has been modified to make a distinction
between the system packages and the NOAO optical astronomy packages.  The basic
directory structure of the system was also changed to reflect the new package
organization, and the printed documentation will be changed as well when time
permits.  These changes were necessary to better isolate science software such
as the NOAO and STScI/SDAS packages from the system software, for a more logical
package structure, and to make it easier to install and maintain the science
packages.

The new root menu of IRAF is as follows:

    dataio      images      lists       noao        sdas        system
    dbms        language    local       plot        softools    utilities

The NOAO menu is as follows:

    artdata     astutil     focas       mtlocal     proto       twodspec
    astrometry  digiphot    imred       onedspec    surfphot

Three new packages were added and three old packages were extensively revised.
The NOAO mountain tape readers were moved from the DATAIO package into the new
MTLOCAL package.  The astronomically oriented utility tasks were moved from
the UTILITIES package to the new ASTUTIL package.  The old LOCAL package was
renamed PROTO, and a new LOCAL package was added in the directory
"iraf$local/tasks".

The concept of the new PROTO package is appropriate for what the old LOCAL
package was used for, i.e., prototype, temporary, or contributed tasks which
are part of the NOAO package and which are exported with the system, but which
are expected to eventually disappear or be replaced by planned system
facilities.  The new LOCAL package is a place to put tasks of strictly local
interest, or tasks which are not portable, e.g., foreign tasks and the Peritek
package.  The LOCAL package should be particularly useful for outside sites
as it gives them a place to put locally added tasks which will not be affected
by future updates of the system.  Also, the framework (mkpkg, local.cl, etc.)
is all set up, making it easier for outside sites to add their own software
without having to figure out how to set up an IRAF package.


20 Feb 85       Recovery from Interrupts
-------------------------------------------------------------------------------

    Tests today (unfortunately only shortly before the first IRAF release)
have shown that VMS/IRAF has higher failure rate than expected for recovery
from a ctrl/c interrupt of a running subprocess, especially if the process
is actively doing i/o.  It is probably much safer to interrupt a compute
bound process than a process which is doing heavy i/o, e.g., reading a tape
or doing many file opens, or probably large numbers of any type of system
calls.  The failure rate for i/o intensive processes was as high as 1 failure
to recover in 4 interrupts in some of the cases tested.  Testing of UNIX/IRAF
turned up some of the same problems, but the failure rate was considerably
lower, probably because the kernel and i/o system are so much simpler.

Interrupting a process at the wrong time can cause many problems, e.g.,
[1] subprocess memory can be corrupted, resulting in unpredictable behaviour
and possibly deadlock when the CL later tries to talk the the process,
[2] a VMS forced exit of the process can occur, e.g., when trying to deliver
an AST to an invalid address, [3] corruption of the CL/subprocess communications
protocol can occur, resulting in deadlock or the loss of sync (the output of
a task will come out when the next command is entered), and various other
problems as well.

Tests on the old version of VMS/IRAF, which dates back to last fall, show
that the problem has existed all along.  The fact that we did not fully
appreciate the problem until now indicates that the problem is not a serious
hindrance provided one is conservative about the use of interrupts.  It also
appears that this will not be an easy problem to solve, hence it is likely
to be with us for a while.  Probably nothing at all will be done about it
for some months since other projects are likely to have a higher priority
if this problem is understood and can be worked around.

In summary, try to minimize the use of interrupts, and in particular, avoid
interrupting processes which are doing heavy i/o.  When in doubt, type
"flpr" after interrupting a process to force it to be restarted.  If a
subprocess becomes hung it may be necessary to restart the CL itself.


20 Feb 85       Process connect failure during ":.snap" in cursor mode
----------------------------------------------------------------------------

    We are still ocasionally having problems when trying to spawn a graphics
subkernel in response to a ":.snap" command in cursor mode.  This happens
infrequently (which is why it is so hard to find the bug), and will usually
go away after exiting and reentering cursor mode and trying again.  It might
also help to do a ":.gflush" while in cursor mode.
