.help convolve Jan91 images.imfilter
.ih
NAME
convolve -- convolve an image with an arbitrary rectangular kernel
.ih
USAGE
convolve input output kernel
.ih
PARAMETERS
.ls input
List of images to be convolved with the rectangular kernel.
.le
.ls output
List of output images. The number of output images must equal the number of
input images. If the input image name equals the output image name the
convolved image will replace the input image.
.le
.ls kernel
A text file name or a string listing the 2D kernel elements.
The kernel elements are separated by whitespace or commas and the kernel rows
are delimited by \fIrow_delimiter\fR.
In string entry mode the elements are assumed to be in row order.
In text file entry mode the \fIlast\fR row of the
kernel is the \fIfirst\fR row of the text file.
\fIKernel\fR is requested if \fIbilinear\fR is "no".
.le
.ls xkernel
A text file or string containing the 1D x dimension component of the bilinear
convolution kernel. The kernel elements are separated by whitespace
or commas. \fIXkernel\fR is requested if \fIbilinear\fR is "yes".
.le
.ls ykernel
A text file or string containing the 1D y dimension component of the bilinear
convolution kernel. The kernel elements are separated by whitespace
or commas. \fIYkernel\fR is requested if \fIbilinear\fR is "yes".
.le
.ls bilinear
Is the convolution kernel bilinear? If \fIbilinear\fR is yes, then the full 2D
convolution kernel \fIkernel\fR can be expressed as two independent 1D
convolutions \fIxkernel\fR and \fIykernel\fR,
and a more efficient convolution algorithm is used.
.le
.ls radsym = no
Is the convolution kernel radially symmetric? If radsym "yes", a more efficient
convolution algorithm is used.
.le
.ls boundary = "nearest"
The algorithm used to compute the values of the out of bounds pixels. The
options are:
.ls nearest
Use the value of the nearest boundary pixel.
.le
.ls constant
Use a constant value.
.le
.ls reflect
Generate a value by reflecting around the boundary.
.le
.ls wrap
Generate a value by wrapping around to the opposite side of the image.
.le
.le
.ls constant = 0.
The constant for constant-valued boundary extension.
.le
.ls row_delimiter = ";"
The row delimiter character for multi-row kernels.
.le

.ih
DESCRIPTION

CONVOLVE convolves the list of images specified by \fIinput\fR with an
arbitrary user supplied rectangular kernel \fIkernel\fR (if \fIbilinear\fR
is "no") or two equivalent 1D kernels \fIxkernel\fR and \fIykernel\fR
(if \fIbilinear\fR is "yes") and places the convolved images in \fIoutput\fR. 
Out of bounds pixels are computed using the algorithm specified
by \fIboundary\fR.

\fIKernel\fR or alternatively \fIxkernel\fR and \fIykernel\fR  is either a
text file name or a short string listing the kernel elements. 
The kernel elements are separated by whitespace or commas and the kernel rows
are delimited by the character \fIrow_delimiter\fR. 
In string entry mode the elements are assumed to be in row order.
In text file entry mode the \fIlast\fR row of the
kernel is the \fIfirst\fR row of the text file.

The parameters \fIbilinear\fR and \fIradsym\fR can be used to greatly
speed up the convolution task for convolution kernels which have
the appropriate mathematical form. Bilinear convolution kernels
are those which define a function which is mathematically separable in
the x and y dimension. In this case convolving each line of the input
image with \fIxkernel\fR and then convolving each column of this intermediate
image with \fIykernel\fR, is operationally equivalent to convolving
each point in the entire image  with the full 2D kernel \fIkernel\fR.
Radially symmetric kernels are those which are symmetric about some
central point.

.ih
EXAMPLES
Examples 1 and 2 use the following kernel where -1 is element 1 of row 1.

.nf
	          1.  1.  1.
	 kernel = 0.  0.  0.
	         -1. -1. -1.
.fi

1. Convolve an image with the above kernel using string entry mode and wrap
around boundary extension.

.nf
    cl> convolve m82 m82.cnv "-1. -1. -1.; 0. 0. 0.; 1. 1. 1." bound=wrap
.fi

2. Type the contents of the kernel file fdy on the terminal. Convolve an image
with the kernel in fdy using nearest neighbor boundary extension.

.nf
    cl> type fdy

        1. 1. 1.;
        0. 0. 0.;
        -1. -1. -1.;

    cl> convolve m74 m74.cnv fdy
.fi

Example 3 uses the following bilinear kernel, where x# and y# are elements
of xkernel and ykernel respectively.

.nf
	xkernel = .2500  .5000  .2500

	ykernel = .2500  .5000  .2500

		  .0625  .1250  .0625      y1*x1  y1*x2  y1*x3
	 kernel = .1250  .2500  .1250   =  y2*x1  y2*x2  y2*x3
	          .0625  .1250  .0625      y3*x1  y3*x2  y3*x3

.fi

3. Convolve an image with the full 2D kernel and with the the equivalent 
1D kernels xkernel and ykernel and compare the results.

.nf
    cl> convolve m92 m92.1 kernel

    cl> convolve m92 m92.2 xkernel ykernel bilinear+

    cl> imarith m92.1 - m92.2 diff
.fi

.ih
TIME REQUIREMENTS
CONVOLVE requires approximately 30 and 8 cpu seconds to convolve a
512 square real image with 17 by 17 radially symmetric convolution kernel
using the full 2D and bilinear kernels (if appropriate) respectively
on a Sparc Station 1.

.ih
BUGS

.ih
SEE ALSO
gauss, laplace, gradient, boxcar
.endhelp
