E_DEBUG	eparam.c	/^#define	E_DEBUG(str)	e_display(str,cmdline,1)   \//
VALU	operand.h	/^#define	VALU(o)	(((o)->o_type == OT_REAL) ? (o)->o/
YYBACKUP	ytab.c	/^#define YYBACKUP( newtoken, newvalue )\\$/
YYRECOVERING	ytab.c	/^#define YYRECOVERING()	(!!yyerrflag)$/
_bkgjob	bkg.c	/^struct _bkgjob {$/
_input	scan.c	/^struct _input {$/
_ltasksrch	task.c	/^_ltasksrch (pkname, ltname, o_pkp)$/
abbrev	modes.c	/^abbrev ()$/
addconst	gram.c	/^addconst (s, t)$/
addltask	task.c	/^addltask (pkp, ptname, ltname, redef)$/
addparam	pfiles.c	/^addparam (pfp, buf, fp)$/
addpipe	gram.c	/^addpipe()$/
arr_desc	operand.h	/^struct arr_desc {$/
arrhead	operand.h	/^union arrhead {$/
binexp	binop.c	/^binexp (opcode)$/
binop	binop.c	/^binop (opcode)$/
bkg_abort	bkg.c	/^bkg_abort()$/
bkg_close	bkg.c	/^bkg_close (job, pmsg)$/
bkg_delfiles	bkg.c	/^bkg_delfiles (job)$/
bkg_init	bkg.c	/^bkg_init (bcs)$/
bkg_jobactive	bkg.c	/^bkg_jobactive (job)$/
bkg_jobstatus	bkg.c	/^bkg_jobstatus (fp, job)$/
bkg_kill	bkg.c	/^bkg_kill (job)$/
bkg_query	modes.c	/^bkg_query (obuf, maxch, pp)$/
bkg_spawn	bkg.c	/^bkg_spawn (cmd)$/
bkg_startup	bkg.c	/^bkg_startup (bkgfile)$/
bkg_update	bkg.c	/^bkg_update (pmsg)$/
bkg_wait	bkg.c	/^bkg_wait (job)$/
bkg_wfservice	bkg.c	/^bkg_wfservice (job)$/
bkgfilehdr	bkg.c	/^struct bkgfilehdr {$/
breakout	gram.c	/^breakout (full, pk, t, p, f)$/
btoi	mem.h	/^#define	btoi(x)	((int)((((x)+BPI-1)\/BPI))) \/* av/
builtin	builtin.c	/^	static struct builtin {$/
busy	bkg.c	/^#define	busy(job)	(jobtable[(job)-1].b_flags & J_R/
c_main	main.c	/^c_main (prtype, bkgfile)$/
c_scanmode	decl.c	/^c_scanmode (pp, o)$/
callnewtask	exec.c	/^callnewtask (name)$/
caseset	gram.c	/^caseset (parg, ncaseval)$/
catdstr	compile.c	/^catdstr (es, ns)$/
ck_atoi	pfiles.c	/^ck_atoi (str, val)$/
cl_amovi	main.c	/^cl_amovi (ip, op, len)$/
cl_error	errs.c	/^cl_error (va_alist)$/
cl_scan	scan.c	/^cl_scan (nargs, source)$/
cl_scanf	scan.c	/^cl_scanf (format, nargs, input)$/
clallhelp	builtin.c	/^clallhelp()$/
clallocate	builtin.c	/^clallocate()$/
clback	builtin.c	/^clback()$/
clbeep	builtin.c	/^clbeep()$/
clbye	builtin.c	/^clbye()$/
clcache	builtin.c	/^clcache ()$/
clchdir	builtin.c	/^clchdir()$/
clclbye	builtin.c	/^clclbye()$/
clclear	builtin.c	/^clclear()$/
clcurpack	builtin.c	/^clcurpack()$/
cldeallocate	builtin.c	/^cldeallocate()$/
cldevstatus	builtin.c	/^cldevstatus()$/
cldparam	builtin.c	/^cldparam()$/
cledit	builtin.c	/^cledit()$/
clehistory	builtin.c	/^clehistory()$/
cleparam	builtin.c	/^cleparam()$/
clerror	builtin.c	/^clerror()$/
clexit	main.c	/^clexit()$/
clflprcache	builtin.c	/^clflprcache()$/
clforeign	builtin.c	/^clforeign()$/
clfprint	builtin.c	/^clfprint()$/
clfunc	builtin.c	/^clfunc()$/
clgflush	builtin.c	/^clgflush()$/
clhelp	builtin.c	/^clhelp()$/
clhidetask	builtin.c	/^clhidetask()$/
clhistory	builtin.c	/^clhistory()$/
cljobs	builtin.c	/^cljobs()$/
clkeep	builtin.c	/^clkeep()$/
clkill	builtin.c	/^clkill()$/
cllogout	builtin.c	/^cllogout()$/
cllparam	builtin.c	/^cllparam()$/
clntask	builtin.c	/^clntask()$/
close_logfile	history.c	/^close_logfile (fname)$/
closelist	lists.c	/^closelist (pp)$/
clpack	builtin.c	/^clpack()$/
clpkg	builtin.c	/^clpkg()$/
clprcache	builtin.c	/^clprcache()$/
clprint	builtin.c	/^clprint()$/
clprintf	builtin.c	/^clprintf()$/
clputlog	builtin.c	/^clputlog()$/
clreset	builtin.c	/^clreset()$/
clrtask	builtin.c	/^clrtask()$/
clscanf	builtin.c	/^clscanf()$/
clscans	builtin.c	/^clscans()$/
clservice	builtin.c	/^clservice()$/
clset	builtin.c	/^clset()$/
clshow	builtin.c	/^clshow()$/
clsleep	builtin.c	/^clsleep()$/
clstty	builtin.c	/^clstty()$/
clsystem	clsystem.c	/^clsystem (cmd, taskout, taskerr)$/
cltask	builtin.c	/^cltask (redef)$/
cltime	builtin.c	/^cltime()$/
clunlearn	builtin.c	/^clunlearn()$/
clupdate	builtin.c	/^clupdate()$/
clwait	builtin.c	/^clwait()$/
cmd_match	edcap.c	/^cmd_match (cstring, nchars)$/
cmdsrch	task.c	/^cmdsrch (pkname, ltname)$/
codeentry	opcodes.h	/^struct codeentry {$/
coderef	mem.h	/^#define	coderef(x)	((struct codeentry *)&stack[x])/
comdstr	compile.c	/^comdstr (s)$/
compile	compile.c	/^compile (opcode, args, args2)$/
comstr	compile.c	/^comstr (s, loc)$/
crackident	gram.c	/^crackident (s)$/
curcmd	history.c	/^curcmd()$/
d_alloc	builtin.c	/^struct d_alloc {$/
d_d	debug.c	/^d_d()$/
d_f	debug.c	/^d_f()$/
d_l	debug.c	/^d_l()$/
d_off	debug.c	/^d_off()$/
d_on	debug.c	/^d_on()$/
d_p	debug.c	/^d_p()$/
d_stack	debug.c	/^d_stack (locpc, ss)$/
d_t	debug.c	/^d_t()$/
daddr	mem.h	/^#define	daddr(x)			(&dictionary[x])$/
dd_f	debug.c	/^dd_f (msg, fname)$/
defpac	task.c	/^defpac (pkname)$/
defpar	param.c	/^defpar (param_spec)$/
deftask	task.c	/^deftask (task_spec)$/
delpipes	gram.c	/^delpipes (npipes)$/
dereference	mem.h	/^#define	dereference(ptr) \\$/
do_arrayinit	decl.c	/^do_arrayinit (pp, nval, nindex)$/
do_clprint	builtin.c	/^do_clprint (dest)$/
do_option	decl.c	/^do_option (pp, oo, o)$/
do_scalarinit	decl.c	/^do_scalarinit (pp, inited)$/
dtoi	mem.h	/^#define dtoi(x) ((int)(sizeof(double))\/(sizeof(me/
dumpparams	gram.c	/^dumpparams (pfp)$/
e_check_vals	eparam.c	/^e_check_vals (string)$/
e_clear	eparam.c	/^e_clear()$/
e_clrerror	eparam.c	/^e_clrerror ()$/
e_clrline	eparam.c	/^e_clrline()$/
e_colon	eparam.c	/^e_colon()$/
e_ctrl	eparam.c	/^e_ctrl (cap)$/
e_display	eparam.c	/^e_display (string, sline, scol)$/
e_displayml	eparam.c	/^e_displayml (string, sline, scol, ccol)$/
e_drawkey	eparam.c	/^e_drawkey()$/
e_dumpop	debug.c	/^e_dumpop()$/
e_encode_vstring	eparam.c	/^e_encode_vstring (pp, outbuf)$/
e_getfield	eparam.c	/^e_getfield (ip, outstr, maxch)$/
e_goto	eparam.c	/^e_goto (col, line)$/
e_makelist	eparam.c	/^e_makelist (pfileptr)$/
e_moreflag	eparam.c	/^e_moreflag (topkey)$/
e_movedown	eparam.c	/^e_movedown (eparam)$/
e_moveup	eparam.c	/^e_moveup (eparam)$/
e_pheader	eparam.c	/^e_pheader (pfp, cmdline, maxcol)$/
e_psetok	eparam.c	/^e_psetok (pset)$/
e_puterr	eparam.c	/^e_puterr (errmsg)$/
e_putline	eparam.c	/^e_putline (stwing)$/
e_repaint	eparam.c	/^e_repaint()$/
e_rpterror	eparam.c	/^e_rpterror (errstr)$/
e_scrollit	eparam.c	/^e_scrollit()$/
e_testtop	eparam.c	/^e_testtop (cur, new)$/
e_tonextword	eparam.c	/^e_tonextword (ip)$/
e_toprevword	eparam.c	/^e_toprevword (ip, string)$/
e_ttyexit	eparam.c	/^e_ttyexit()$/
e_ttyinit	eparam.c	/^e_ttyinit()$/
e_undef	eparam.c	/^e_undef (s)$/
echocmds	clmodes.h	/^#define	echocmds()	(clecho != NULL && \\$/
edit_commands	eparam.h	/^struct edit_commands {$/
edit_history_directive	eparam.c	/^edit_history_directive (args, new_cmd)$/
editstring	eparam.c	/^editstring (string, eparam)$/
edtexit	edcap.c	/^edtexit()$/
edtinit	edcap.c	/^edtinit()$/
effmode	modes.c	/^effmode (pp)$/
enumin	gquery.c	/^enumin (pp)$/
ep_context	eparam.h	/^struct ep_context {$/
eparam	eparam.c	/^eparam (cx, update, nextcmd, nextpset)$/
eprintf	clprintf.c	/^eprintf (va_alist)$/
epset	eparam.c	/^epset (pset)$/
execnewtask	exec.c	/^execnewtask ()$/
execute	main.c	/^execute (mode)$/
expand_history_macros	history.c	/^expand_history_macros (in_text, out_text)$/
fetch_history	history.c	/^fetch_history (recptr, command, maxch)$/
fieldcvt	gram.c	/^fieldcvt (f)$/
filetime	pfiles.c	/^filetime (fname, timecode)$/
find_history	history.c	/^find_history (record)$/
findexe	exec.c	/^findexe (pkg, pkg_path)$/
fprop	operand.c	/^fprop (fp, op)$/
get_arglist	history.c	/^get_arglist (cmdblk, argp)$/
get_bkgqfiles	modes.c	/^get_bkgqfiles (bkgno, pid, bkg_query_file, query_r/
get_command	history.c	/^get_command (fp)$/
get_dim	decl.c	/^get_dim (pname)$/
get_editor	edcap.c	/^get_editor (editor)$/
get_history	history.c	/^get_history (record, command, maxch)$/
get_nscanval	scan.c	/^get_nscanval()$/
getlabel	gram.c	/^getlabel (name)$/
getlimits	decl.c	/^getlimits (pname, n, i1, i2)$/
getoffset	param.c	/^getoffset(pp)$/
getpipe	gram.c	/^getpipe()$/
gquery	gquery.c	/^gquery (pp, string)$/
host_editor	edcap.c	/^host_editor (editor)$/
in_switch	gram.c	/^in_switch()$/
initparam	decl.c	/^initparam (op, isparam, type, list)$/
inrange	modes.c	/^inrange (pp, op)$/
int	main.c	/^typedef	int (*PFI)();$/
intr_disable	main.c	/^intr_disable()$/
intr_enable	main.c	/^intr_enable()$/
intr_reset	main.c	/^intr_reset()$/
intrfunc	gram.c	/^intrfunc (fname, nargs)$/
iofinish	exec.c	/^iofinish (tp)$/
is_pfilename	pfiles.c	/^is_pfilename (opstr)$/
keep	builtin.c	/^keep (tp)$/
keeplog	clmodes.h	/^#define	keeplog()	(clkeeplog != NULL && \\$/
keyword	gram.c	/^keyword (tbl, s)$/
keywords	gram.c	/^	struct keywords {$/
killtask	exec.c	/^killtask (tp)$/
label	construct.h	/^struct	label {$/
lapkg	builtin.c	/^lapkg()$/
lentst	scan.c	/^lentst (buf)$/
lex_clrcpumode	grammar.h	/^#define	lex_clrcpumode(fp)	((fp)->_fflags &= ~_LEX/
lex_cpumodeset	grammar.h	/^#define	lex_cpumodeset(fp)	((fp)->_fflags & _LEXBI/
lex_setcpumode	grammar.h	/^#define	lex_setcpumode(fp)	((fp)->_fflags |= _LEXB/
lex_yylex	lexyy.c	/^lex_yylex(){$/
lexicon	lexicon.c	/^lexicon()$/
lexinit	lexicon.c	/^lexinit()$/
lexmodes	clmodes.h	/^#define	lexmodes()	(cllexmodes != NULL && \\$/
listallhelp	gram.c	/^listallhelp (show_invis)$/
listhelp	gram.c	/^listhelp (pkp, show_invis)$/
listparams	gram.c	/^listparams (pfp)$/
log_background	clmodes.h	/^#define log_background() 	(cllogmode & LOG_BACKGRO/
log_commands	clmodes.h	/^#define log_commands()		(cllogmode & LOG_COMMANDS)/
log_errors	clmodes.h	/^#define log_errors() 		(cllogmode & LOG_ERRORS)$/
log_trace	clmodes.h	/^#define log_trace() 		(cllogmode & LOG_TRACE)$/
logfile	clmodes.h	/^#define	logfile() \\$/
login	main.c	/^login ()$/
logout	main.c	/^logout ()$/
long	config.h	/^typedef memel unsigned long;	\/* type for dictiona/
lookup_param	param.c	/^lookup_param (pkname, ltname, pname)$/
loopdecr	gram.c	/^loopdecr()$/
loopincr	gram.c	/^loopincr ()$/
ltask	task.h	/^struct ltask {$/
ltaskfind	task.c	/^ltaskfind (pkp, name, enable_abbreviations)$/
ltasksrch	task.c	/^ltasksrch (pkname, ltname)$/
make_imloop	gram.c	/^make_imloop (i1, i2)$/
makelower	pfiles.c	/^makelower (cp)$/
makemode	param.c	/^makemode (pp, s)$/
makeop	operand.c	/^makeop (str, type)$/
maketype	decl.c	/^maketype (type, list)$/
map_escapes	edcap.c	/^map_escapes (input, output)$/
mapname	pfiles.c	/^mapname (in, out, maxlen)$/
memneed	main.c	/^memneed (incr)$/
menus	clmodes.h	/^#define	menus()		(clmenus != NULL && \\$/
minmax	gquery.c	/^minmax (pp)$/
mk_startupmsg	exec.c	/^mk_startupmsg (tp, cmd, maxch)$/
mkarglist	builtin.c	/^mkarglist (pfp, args, argp)$/
mkpfilename	pfiles.c	/^mkpfilename (buf, dir, pkname, ltname, extn)$/
nargs	builtin.c	/^nargs (pfp)$/
newbuiltin	builtin.c	/^newbuiltin (pkp, lname, fp, flags, ftprefix, redef/
newfakeparam	param.c	/^newfakeparam (pfp, name, pos, type, string_len)$/
newltask	task.c	/^newltask (pkp, lname, pname, oldltp)$/
newpac	task.c	/^newpac (name, bin)$/
newparam	param.c	/^newparam (pfp)$/
newpfile	pfiles.c	/^newpfile (ltp)$/
next_task	task.h	/^#define next_task(tp)	((struct task *)((char *)tp /
nextfield	pfiles.c	/^nextfield (pp, fp)$/
nextstr	modes.c	/^nextstr (pbuf, fp)$/
notify	clmodes.h	/^#define	notify()	(clnotify != NULL && \\$/
nxtchr	modes.c	/^nxtchr (p, fp)$/
o_absargset	opcodes.c	/^o_absargset (argp)$/
o_add	opcodes.c	/^o_add ()$/
o_addassign	opcodes.c	/^o_addassign (argp)$/
o_allappend	opcodes.c	/^o_allappend ()$/
o_allredir	opcodes.c	/^o_allredir ()$/
o_and	opcodes.c	/^o_and ()$/
o_append	opcodes.c	/^o_append()$/
o_assign	opcodes.c	/^o_assign (argp)$/
o_biff	opcodes.c	/^o_biff (argp)$/
o_call	opcodes.c	/^o_call (argp)$/
o_catassign	opcodes.c	/^o_catassign (argp)$/
o_chsign	opcodes.c	/^o_chsign ()$/
o_concat	opcodes.c	/^o_concat ()$/
o_div	opcodes.c	/^o_div ()$/
o_divassign	opcodes.c	/^o_divassign (argp)$/
o_doaddpipe	opcodes.c	/^o_doaddpipe (argp)$/
o_doend	opcodes.c	/^o_doend()$/
o_dofscan	opcodes.c	/^o_dofscan()$/
o_dofscanf	opcodes.c	/^o_dofscanf()$/
o_dogetpipe	opcodes.c	/^o_dogetpipe (argp)$/
o_dogoto	opcodes.c	/^o_dogoto (argp)$/
o_dopow	opcodes.c	/^o_dopow ()$/
o_doprint	opcodes.c	/^o_doprint()$/
o_doreturn	opcodes.c	/^o_doreturn()$/
o_doscan	opcodes.c	/^o_doscan()$/
o_doscanf	opcodes.c	/^o_doscanf()$/
o_doswitch	opcodes.c	/^o_doswitch (jmpdelta)$/
o_eq	opcodes.c	/^o_eq ()$/
o_exec	opcodes.c	/^o_exec ()$/
o_fixlanguage	opcodes.c	/^o_fixlanguage()$/
o_ge	opcodes.c	/^o_ge ()$/
o_gsredir	opcodes.c	/^o_gsredir (argp)$/
o_gt	opcodes.c	/^o_gt ()$/
o_immed	opcodes.c	/^o_immed()$/
o_indirabsset	opcodes.c	/^o_indirabsset (argp)$/
o_indirposset	opcodes.c	/^o_indirposset (argp)$/
o_indxincr	opcodes.c	/^o_indxincr (argp)$/
o_inspect	opcodes.c	/^o_inspect (argp)$/
o_intrinsic	opcodes.c	/^o_intrinsic (argp)$/
o_le	opcodes.c	/^o_le ()$/
o_lt	opcodes.c	/^o_lt ()$/
o_mul	opcodes.c	/^o_mul()$/
o_mulassign	opcodes.c	/^o_mulassign (argp)$/
o_ne	opcodes.c	/^o_ne ()$/
o_not	opcodes.c	/^o_not ()$/
o_or	opcodes.c	/^o_or()$/
o_osesc	opcodes.c	/^o_osesc (argp)$/
o_posargset	opcodes.c	/^o_posargset (argp)$/
o_pushconst	opcodes.c	/^o_pushconst (argp)$/
o_pushindex	opcodes.c	/^o_pushindex (mode)$/
o_pushparam	opcodes.c	/^o_pushparam (argp)$/
o_redir	opcodes.c	/^o_redir ()$/
o_redirin	opcodes.c	/^o_redirin ()$/
o_rmpipes	opcodes.c	/^o_rmpipes (argp)$/
o_sub	opcodes.c	/^o_sub()$/
o_subassign	opcodes.c	/^o_subassign (argp)$/
o_swoff	opcodes.c	/^o_swoff (argp)$/
o_swon	opcodes.c	/^o_swon (argp)$/
o_undefined	opcodes.c	/^o_undefined ()$/
offsetmode	param.c	/^offsetmode (mode)$/
oneof	exec.c	/^oneof()$/
onerr	main.c	/^onerr()$/
onint	main.c	/^onint (vex, next_handler)$/
onipc	prcache.c	/^onipc (vex, next_handler)$/
opcast	operand.c	/^opcast (newtype)$/
open_logfile	history.c	/^open_logfile (fname)$/
operand	operand.h	/^struct operand {$/
opindef	operand.h	/^#define	opindef(op)	(((op)->o_type & OT_INDEF) != /
opindir	operand.c	/^opindir()$/
oprintf	clprintf.c	/^oprintf (va_alist)$/
oprop	operand.c	/^oprop (op)$/
opundef	operand.h	/^#define	opundef(op)	(((op)->o_type & OT_UNDEF) != /
p_position	gram.c	/^p_position()$/
pacfind	task.c	/^pacfind (name)$/
package	task.h	/^struct package {$/
param	param.h	/^struct param {$/
paramfind	param.c	/^paramfind (pfp, pname, pos, exact)$/
paramget	param.c	/^paramget (pp, field)$/
paramset	param.c	/^paramset (pp, field)$/
paramsrch	param.c	/^paramsrch (pkname, ltname, pname)$/
parse_clmodes	modes.c	/^parse_clmodes (pp, newval)$/
pfcopyback	pfiles.c	/^pfcopyback (pff)$/
pfile	param.h	/^struct pfile {$/
pfilecopy	pfiles.c	/^pfilecopy (pfp)$/
pfilefind	pfiles.c	/^pfilefind (ltp)$/
pfileinit	pfiles.c	/^pfileinit (ltp)$/
pfileload	pfiles.c	/^pfileload (ltp)$/
pfilemerge	pfiles.c	/^pfilemerge (npf, opfile)$/
pfileread	pfiles.c	/^pfileread (ltp, pfilename, checkmode)$/
pfilesrch	pfiles.c	/^pfilesrch (pfilepath)$/
pfileunlink	pfiles.c	/^pfileunlink (pfp)$/
pfileupdate	pfiles.c	/^pfileupdate (pfp)$/
pfilewrite	pfiles.c	/^pfilewrite (pfp, pfilename)$/
pipefile	gram.c	/^pipefile (pipecode)$/
poffset	modes.c	/^poffset (off)$/
pop	stack.c	/^pop ()$/
popop	stack.c	/^popop ()$/
poptask	stack.c	/^poptask ()$/
ppfind	exec.c	/^ppfind (pfp, tn, pn, pos, abbrev)$/
pprompt	history.c	/^pprompt (string)$/
ppush	stack.c	/^ppush (p)$/
pquery	modes.c	/^pquery (pp, fp)$/
pr_busy	prcache.c	/^#define	pr_busy(pr)	(((pr)->pr_flags&(P_ACTIVE|P_L/
pr_cachetask	prcache.c	/^pr_cachetask (ltname)$/
pr_chdir	prcache.c	/^pr_chdir (pid, newdir)$/
pr_checkup	prcache.c	/^pr_checkup()$/
pr_connect	prcache.c	/^pr_connect (process, command, in,out, t_in,t_out,t/
pr_disconnect	prcache.c	/^pr_disconnect (pid)$/
pr_dumpcache	prcache.c	/^pr_dumpcache (pid, break_locks)$/
pr_envset	prcache.c	/^pr_envset (pid, envvar, valuestr)$/
pr_findproc	prcache.c	/^pr_findproc (process)$/
pr_getpno	prcache.c	/^pr_getpno()$/
pr_idle	prcache.c	/^#define	pr_idle(pr)	(((pr)->pr_flags&P_ACTIVE)==0)/
pr_initcache	prcache.c	/^pr_initcache()$/
pr_listcache	prcache.c	/^pr_listcache (fp)$/
pr_lock	prcache.c	/^pr_lock (pid)$/
pr_pconnect	prcache.c	/^pr_pconnect (process, in, out)$/
pr_pdisconnect	prcache.c	/^pr_pdisconnect (pr)$/
pr_pnametopid	prcache.c	/^pr_pnametopid (pname)$/
pr_prunecache	prcache.c	/^pr_prunecache (pno)$/
pr_setcache	prcache.c	/^pr_setcache (new_szprcache)$/
pr_tohead	prcache.c	/^pr_tohead (pr)$/
pr_totail	prcache.c	/^pr_totail (pr)$/
pr_unlink	prcache.c	/^pr_unlink (pr)$/
pretty_param	gram.c	/^pretty_param (pp, fp)$/
print_command	history.c	/^print_command (fp, command, marg1, marg2)$/
printcall	exec.c	/^printcall (fp, tp)$/
printparam	param.c	/^printparam (pp, fp)$/
proc_params	decl.c	/^proc_params (npar)$/
process	prcache.c	/^struct process {$/
process_history_directive	history.c	/^process_history_directive (directive, new_command_/
procscript	decl.c	/^procscript (fp)$/
prop	operand.c	/^prop (op)$/
prparamval	clprintf.c	/^prparamval (pp, fp)$/
psetreload	exec.c	/^psetreload (main_pfp, psetp)$/
push	stack.c	/^push (v)$/
pushbparams	builtin.c	/^pushbparams (pp)$/
pushbpvals	builtin.c	/^pushbpvals (pp)$/
pushfparams	builtin.c	/^pushfparams (pp)$/
pushop	stack.c	/^pushop (op)$/
pushtask	stack.c	/^pushtask ()$/
put_history	history.c	/^put_history (command)$/
put_logfile	history.c	/^put_logfile (command)$/
putlog	history.c	/^putlog (tp, usermsg)$/
pvaldefined	param.c	/^pvaldefined (pp, s)$/
qputs	param.c	/^qputs (str, fp)$/
qstrcmp	clprintf.c	/^qstrcmp (a, b)$/
query	modes.c	/^query (pp)$/
range_check	modes.c	/^range_check (pp)$/
rbkgfile	bkg.c	/^rbkgfile (bkgfile)$/
readlist	lists.c	/^readlist (pp)$/
reference	mem.h	/^#define	reference(sname,index)	((struct sname *) (/
rerun	gram.c	/^rerun()$/
reset_logfile	history.c	/^reset_logfile()$/
restor	exec.c	/^restor (tp)$/
run	exec.c	/^run ()$/
scanenum	decl.c	/^scanenum (pp, o)$/
scanftype	decl.c	/^scanftype (pp, o)$/
scanlen	decl.c	/^scanlen (pp, o)$/
scanmax	decl.c	/^scanmax (pp, o)$/
scanmin	decl.c	/^scanmin (pp, o)$/
scanmode	pfiles.c	/^scanmode (s)$/
scantype	pfiles.c	/^scantype (s)$/
search_history	history.c	/^search_history (directive, new_command_block)$/
service_bkgquery	modes.c	/^service_bkgquery (bkgno)$/
set_clio	exec.c	/^set_clio (newtask)$/
setbuiltins	builtin.c	/^setbuiltins (pkp)$/
setclmodes	modes.c	/^setclmodes (tp)$/
setigoto	gram.c	/^setigoto (loc)$/
setlabel	gram.c	/^setlabel (name)$/
setopindef	operand.h	/^#define	setopindef(op)	((op)->o_type |= OT_INDEF)$/
setopundef	operand.h	/^#define	setopundef(op)	((op)->o_type |= OT_UNDEF)$/
setswitch	gram.c	/^setswitch ()$/
sexa	gram.c	/^struct operand $/
sexa_to_index	gram.c	/^sexa_to_index (r, i1, i2)$/
show_editorhelp	edcap.c	/^show_editorhelp()$/
show_history	history.c	/^show_history (fp, max_commands)$/
show_param	gram.c	/^show_param (ltp, pp, fp)$/
showtype	clmodes.h	/^#define	showtype()	(clshowtype != NULL && \\$/
shutdown	main.c	/^shutdown()$/
size_array	param.c	/^size_array (pp)$/
skip_to	decl.c	/^skip_to (fp, key)$/
spparval	operand.c	/^spparval (outstr, pp)$/
sprop	operand.c	/^sprop (outstr, op)$/
startup	main.c	/^startup()$/
stkop	ytab.c	/^#define	stkop(x)	(reference (operand, (x)))$/
stredit	history.c	/^stredit (edit_directive, in_text, out_text)$/
strint	binop.c	/^strint (s, side)$/
strsort	clprintf.c	/^strsort (list, nstr)$/
strtable	clprintf.c	/^strtable (fp, list, nstr, first_col, last_col, max/
task	task.h	/^struct task {$/
taskmode	modes.c	/^taskmode (tp)$/
taskunwind	task.c	/^taskunwind()$/
today	history.c	/^today()$/
tprintf	clprintf.c	/^tprintf (va_alist)$/
traverse	lexyy.c	/^traverse (delim)$/
unexp	unop.c	/^unexp (opcode)$/
unop	unop.c	/^unop (opcode)$/
unsetigoto	gram.c	/^unsetigoto (loc)$/
until	config.h	/^#define	until(x)	while (!(x))$/
validparamget	param.c	/^validparamget (pp, field)$/
value	operand.h	/^union value {$/
wbkgfile	bkg.c	/^wbkgfile (jobno, cmd)$/
what_cmd	edcap.c	/^what_cmd (first_char)$/
what_record	history.c	/^what_record()$/
y_typedef	gram.c	/^y_typedef (key)$/
yy_getc	history.c	/^yy_getc (fp)$/
yy_startblock	history.c	/^yy_startblock (logflag)$/
yyback	lexyy.c	/^yyback(p, m)$/
yyerror	gram.c	/^yyerror (s)$/
yyinput	lexyy.c	/^yyinput(){$/
yylex	lexicon.c	/^yylex()$/
yylook	lexyy.c	/^yylook(){$/
yyoutput	lexyy.c	/^yyoutput(c)$/
yyparse	ytab.c	/^yyparse()$/
yysvf	lexyy.c	/^struct yysvf { $/
yytoktype	ytab.c	/^typedef struct { char *t_name; int t_val; } yytokt/
yyunput	lexyy.c	/^yyunput(c)$/
yywork	lexyy.c	/^struct yywork { YYTYPE verify, advance; } yycrank[/
yywrap	gram.c	/^yywrap ()$/
