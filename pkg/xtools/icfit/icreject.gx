# Copyright(c) 1986 Association of Universities for Research in Astronomy Inc.

include	<math/curfit.h>
include	"names.h"

# IC_REJECT -- Reject points with large residuals from the fit.
#
# The sigma of the fit residuals is calculated.  The rejection thresholds
# are set at low_reject*sigma and high_reject*sigma.  Points outside the
# rejection threshold are rejected from the fit and flagged in the rejpts
# array.  Finally, the remaining points are refit.

procedure ic_reject$t (cv, x, y, w, rejpts, npts, low_reject, high_reject,
    niterate, grow, nreject)

pointer	cv				# Curve descriptor
PIXEL	x[npts]				# Input ordinates
PIXEL	y[npts]				# Input data values
PIXEL	w[npts]				# Weights
int	rejpts[npts]			# Points rejected
int	npts				# Number of input points
real	low_reject, high_reject		# Rejection threshold
int	niterate			# Number of rejection iterations
real	grow				# Rejection radius
int	nreject				# Number of points rejected

int	i, ierr, nit, newreject
errchk	ic_deviant$t

begin
	# Initialize rejection.
	nreject = 0
	call amovki (NO, rejpts, npts)

	if (niterate <= 0)
	    return

	# Find deviant points.  If an error occurs reduce the number of
	# iterations and start again.
	iferr {
	    nit = 0
	    do i = 1, niterate {
		call ic_deviant$t (cv, x, y, w, rejpts, npts, low_reject,
		    high_reject, grow, YES, nreject, newreject)
		nit = nit + 1
		if (newreject == 0)
		    break
	    }
	} then {
	    call $tcvfit (cv, x, y, w, npts, WTS_USER, ierr)
	    nreject = 0
	    call amovki (NO, rejpts, npts)
	    do i = 1, nit
		call ic_deviant$t (cv, x, y, w, rejpts, npts, low_reject,
		    high_reject, grow, YES, nreject, newreject)
	}
end
