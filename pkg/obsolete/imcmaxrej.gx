# Copyright(c) 1986 Association of Universities for Research in Astronomy Inc.

include	<imhdr.h>

.help imcmaxrej
.nf ----------------------------------------------------------------------------
           COMBINING IMAGES: MAXIMUM REJECTION ALGORITHM

If there is only one input image then it is copied to the output image.
For more than one image they are combined by scaling and taking a weighted
average excluding the maximum value.  The exposure time of
the output image is the scaled and weighted average of the input
exposure times.  The average is computed in real arithmetic with
trunction on output if the output image is an integer datatype.

PROCEDURES:

    IMC_MAXREJ -- Combine the images with maximum rejection
    WTMAXREJ -- Combine image lines with weighting or scaling
    MAXREJ -- Combine image lines without weighting or scaling
.endhelp -----------------------------------------------------------------------

$for (silrdx)
# IMC_MAXREJ -- Combine the images by scaling and taking a weighted average
# excluding the maximum value.  The output image header is updated to include
# a scaled and weighted exposure time and the number of images combined.

procedure imc_maxrej$t (log, in, out, sig, nimages)

int	log			# Log file descriptor
pointer	in[nimages]		# Input images
pointer	out			# Output image
pointer	sig			# Sigma image
int	nimages			# Number of input images

int	i, j, nc
pointer	sp, data, scales, zeros, wts, outdata, sigdata, v1, v2
bool	scale, imc_scales()
pointer	imgnl$t()
$if (datatype == sil)
pointer	impnlr()
$else
pointer	impnl$t()
$endif

begin
	if (nimages == 1) {
	    call imc_copy$t (in[1], out)
	    return
	}

	call smark (sp)
	call salloc (data, nimages, TY_REAL)
	call salloc (scales, nimages, TY_REAL)
	call salloc (zeros, nimages, TY_REAL)
	call salloc (wts, nimages, TY_REAL)
	call salloc (v1, IM_MAXDIM, TY_LONG)
	call salloc (v2, IM_MAXDIM, TY_LONG)
	call amovkl (long(1), Meml[v1], IM_MAXDIM)
	call amovkl (long(1), Meml[v2], IM_MAXDIM)

	# Get the scaling factors and weights.
	scale = imc_scales ("maxreject", log, 0., 0., in, out, Memr[scales],
	    Memr[zeros], Memr[wts], nimages)

	# For each line get input and ouput image lines and combine them.
	nc = IM_LEN(out,1)
	$if (datatype == sil)
	if (scale) {
	    while (impnlr (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call wtmaxrej$t (Memi[data], Memr[scales], Memr[zeros],
		    Memr[wts], nimages, Memr[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnlr (sig, sigdata, Meml[v1])
		    call wtsigma$t (Memi[data], Memr[scales], Memr[zeros],
			Memr[wts], nimages, Memr[outdata], Memr[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	} else {
	    while (impnlr (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call maxrej$t (Memi[data], nimages, Memr[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnlr (sig, sigdata, Meml[v1])
		    call sigma$t (Memi[data], nimages, Memr[outdata],
			Memr[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	}
	$else
	if (scale) {
	    while (impnl$t (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call wtmaxrej$t (Memi[data], Memr[scales], Memr[zeros],
		    Memr[wts], nimages, Mem$t[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnl$t (sig, sigdata, Meml[v1])
		    call wtsigma$t (Memi[data], Memr[scales], Memr[zeros],
			Memr[wts], nimages, Mem$t[outdata], Mem$t[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	} else {
	    while (impnl$t (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call maxrej$t (Memi[data], nimages, Mem$t[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnl$t (sig, sigdata, Meml[v1])
		    call sigma$t (Memi[data], nimages, Mem$t[outdata],
			Mem$t[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	}
	$endif

	call sfree (sp)
end


# WTMAXREJ -- Combine lines with scaling and/or weighting.

procedure wtmaxrej$t (data, scales, zeros, wts, nimages, output, npts)

pointer	data[nimages]		# IMIO data pointers
real	scales[nimages]		# Scale factors
real	zeros[nimages]		# Zero levels
real	wts[nimages]		# Weights
int	nimages			# Number of data lines
$if (datatype == sil)
real	output[npts]		# Output line (returned)
$else
PIXEL	output[npts]		# Output line (returned)
$endif
int	npts			# Number of data points per line

int	i, j, k
real	wt, maxwt
$if (datatype == sil)
real	mean, val, maxval
$else
PIXEL	mean, val, maxval
$endif
$if (datatype == x)
real	absval, absmaxval
$endif

begin
	do i = 1, npts {
	    mean = 0.
	    maxval = Mem$t[data[1]+i-1] / scales[1] - zeros[1]
	    maxwt = wts[1]
	    $if (datatype == x)
	    absmaxval = abs (maxval)
	    $endif
	    k = 1
	    do j = 2, nimages {
		val = Mem$t[data[j]+i-1] / scales[j] - zeros[j]
		wt = wts[j]
	        $if (datatype == x)
	        absval = abs (val)
		if (absval > absmaxval) {
		    absmaxval = absval
	        $else
		if (val > maxval) {
		$endif
		    mean = mean + maxwt * maxval
		    maxval = val
		    maxwt = wt
		    k = j
		} else
		    mean = mean + wt * val
	    }
	    output[i] = mean / (1. - maxwt)
	    Mem$t[data[k]+i-1] = INDEF
        }
end


# MAXREJ -- Combine image lines without weighting or scaling.

procedure maxrej$t (data, nimages, output, npts)

pointer	data[nimages]		# IMIO data pointers
int	nimages			# Number of data lines
$if (datatype == sil)
real	output[npts]		# Output line (returned)
$else
PIXEL	output[npts]		# Output line (returned)
$endif
int	npts			# Number of data points per line

int	i, j, k, nims
$if (datatype == sil)
real	mean, val, maxval
$else
PIXEL	mean, val, maxval
$endif
$if (datatype == x)
real	absval, absmaxval
$endif

begin
	nims = nimages - 1
	do i = 1, npts {
	    mean = 0.
	    maxval = Mem$t[data[1]+i-1]
	    $if (datatype == x)
	    absmaxval = abs (maxval)
	    $endif
	    k = 1
	    do j = 2, nimages {
		val = Mem$t[data[j]+i-1]
	        $if (datatype == x)
	        absval = abs (val)
		if (absval > absmaxval) {
		    absmaxval = absval
	        $else
		if (val > maxval) {
		$endif
		    mean = mean + maxval
		    maxval = val
		    k = j
		} else
		    mean = mean + val
	    }
	    output[i] = mean / nims
	    Mem$t[data[k]+i-1] = INDEF
        }
end
$endfor
