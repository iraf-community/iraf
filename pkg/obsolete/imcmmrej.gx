# Copyright(c) 1986 Association of Universities for Research in Astronomy Inc.

include	<imhdr.h>

.help imcmmrej
.nf ----------------------------------------------------------------------------
         COMBINING IMAGES: MINMAX REJECTION ALGORITHM

If there is only one input image then it is copied to the output image.
If there are two input images then it is an error.  For more than two
input images they are combined by scaling and taking a weighted
average excluding the minimum and maximum values.  The exposure time of
the output image is the scaled and weighted average of the input
exposure times.  The average is computed in real arithmetic with
trunction on output if the output image is an integer datatype.

PROCEDURES:

    IMC_MMREJ -- Combine the images with minmax rejection
    WTMMREJ -- Combine image lines with weighting or scaling
    MMREJ -- Combine image lines without weighting or scaling
.endhelp -----------------------------------------------------------------------

$for (silrdx)
# IMC_MMREJ -- Combine the images by scaling and taking a weighted average
# excluding the minimum and maximum values.  The output image header
# is updated to include a scaled and weighted exposure time and the number
# of images combined.

procedure imc_mmrej$t (log, in, out, sig, nimages)

int	log			# Log file descriptor
pointer	in[nimages]		# Input images
pointer	out			# Output image
pointer	sig			# Sigma image
int	nimages			# Number of input images

int	i, j, nc
pointer	sp, data, scales, zeros, wts, outdata, sigdata, v1, v2
bool	scale, imc_scales()
pointer	imgnl$t()
$if (datatype == sil)
pointer	impnlr()
$else
pointer	impnl$t()
$endif

begin
	if (nimages == 1) {
	    call imc_copy$t (in[1], out)
	    return
	}

	if (nimages == 2)
	    call error (0, "Too few images for minimum/maximum rejection")

	call smark (sp)
	call salloc (data, nimages, TY_REAL)
	call salloc (scales, nimages, TY_REAL)
	call salloc (zeros, nimages, TY_REAL)
	call salloc (wts, nimages, TY_REAL)
	call salloc (v1, IM_MAXDIM, TY_LONG)
	call salloc (v2, IM_MAXDIM, TY_LONG)
	call amovkl (long(1), Meml[v1], IM_MAXDIM)
	call amovkl (long(1), Meml[v2], IM_MAXDIM)

	# Get the scaling factors and weights.
	scale = imc_scales ("minmaxreject", log, 0., 0., in, out, Memr[scales],
	    Memr[zeros], Memr[wts], nimages)

	# For each line get input and ouput image lines and combine them.
	nc = IM_LEN(out,1)
	$if (datatype == sil)
	if (scale) {
	    while (impnlr (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call wtmmrej$t (Memi[data], Memr[scales], Memr[zeros],
		    Memr[wts], nimages, Memr[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnlr (sig, sigdata, Meml[v1])
		    call wtsigma$t (Memi[data], Memr[scales], Memr[zeros],
			Memr[wts], nimages, Memr[outdata], Memr[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	} else {
	    while (impnlr (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call mmrej$t (Memi[data], nimages, Memr[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnlr (sig, sigdata, Meml[v1])
		    call sigmar (Memi[data], nimages, Memr[outdata],
			Mem$t[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	}
	$else
	if (scale) {
	    while (impnl$t (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call wtmmrej$t (Memi[data], Memr[scales], Memr[zeros],
		    Memr[wts], nimages, Mem$t[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnl$t (sig, sigdata, Meml[v1])
		    call wtsigma$t (Memi[data], Memr[scales], Memr[zeros],
			Memr[wts], nimages, Mem$t[outdata], Mem$t[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	} else {
	    while (impnl$t (out, outdata, Meml[v1]) != EOF) {
		do i = 1, nimages {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = imgnl$t (in[i], Memi[data+i-1], Meml[v1])
		}
		call mmrej$t (Memi[data], nimages, Mem$t[outdata], nc)
		if (sig != NULL) {
		    call amovl (Meml[v2], Meml[v1], IM_MAXDIM)
		    j = impnl$t (sig, sigdata, Meml[v1])
		    call sigma$t (Memi[data], nimages, Mem$t[outdata],
			Mem$t[sigdata], nc)
		}
		call amovl (Meml[v1], Meml[v2], IM_MAXDIM)
	    }
	}
	$endif

	call sfree (sp)
end


# WTMMREJ -- Minmax combine image lines with weighting and/or scaling.

procedure wtmmrej$t (data, scales, zeros, wts, nimages, output, npts)

pointer	data[nimages]		# IMIO data pointers
real	scales[nimages]		# Scale factors
real	zeros[nimages]		# Zero levels
real	wts[nimages]		# Weights
int	nimages			# Number of data lines
$if (datatype == sil)
real	output[npts]		# Output line (returned)
$else
PIXEL	output[npts]		# Output line (returned)
$endif
int	npts			# Number of data points per line

int	i, j, k, l
real	wt, minwt, maxwt
$if (datatype == sil)
real	mean, val, minval, maxval
$else
PIXEL	mean, val, minval, maxval
$endif
$if (datatype == x)
real	absval, absminval, absmaxval
$endif

begin
	do i = 1, npts {
	    mean = 0.
	    minval = Mem$t[data[1]+i-1] / scales[1] - zeros[1]
	    maxval = Mem$t[data[2]+i-1] / scales[2] - zeros[2]
	    $if (datatype == x)
	    absminval = abs (minval)
	    absmaxval = abs (maxval)
	    if (absminval < absmaxval) {
	    $else
	    if (minval < maxval) {
	    $endif
		minwt = wts[1]
		maxwt = wts[2]
		k = 1
		l = 2
	    } else {
		$if (datatype == x)
		val = minval
		minval = maxval
		maxval = val
	        absminval = abs (minval)
	        absmaxval = abs (maxval)
		$else
		val = minval
		minval = maxval
		maxval = val
		$endif
		minwt = wts[2]
		maxwt = wts[1]
		k = 2
		l = 1
	    }
	    do j = 3, nimages {
		val = Mem$t[data[j]+i-1] / scales[j] - zeros[j]
		wt = wts[j]
	        $if (datatype == x)
	        absval = abs (val)
		if (absval < absminval) {
		    absminval = absval
	        $else
		if (val < minval) {
		$endif
		    mean = mean + minwt * minval
		    minval = val
		    minwt = wt
		    k = j
		$if (datatype == x)
		} else if (absval > absmaxval) {
		    absmaxval = absval
		$else
		} else if (val > maxval) {
		$endif
		    mean = mean + maxwt * maxval
		    maxval = val
		    maxwt = wt
		    l = j
		} else
		    mean = mean + wt * val
	    }
	    output[i] = mean / (1. - maxwt - minwt)
	    Mem$t[data[k]+i-1] = INDEF
	    Mem$t[data[l]+i-1] = INDEF
        }
end


# MMREJ -- Minmax combine image lines without weighting or scaling.

procedure mmrej$t (data, nimages, output, npts)

pointer	data[nimages]		# IMIO data pointers
int	nimages			# Number of data lines
$if (datatype == sil)
real	output[npts]		# Output line (returned)
$else
PIXEL	output[npts]		# Output line (returned)
$endif
int	npts			# Number of data points per line

int	i, j, k, l, nims
$if (datatype == sil)
real	mean, val, minval, maxval
$else
PIXEL	mean, val, minval, maxval
$endif
$if (datatype == x)
real	absval, absminval, absmaxval
$endif

begin
	nims = nimages - 2
	do i = 1, npts {
	    mean = 0.
	    minval = Mem$t[data[1]+i-1]
	    maxval = Mem$t[data[2]+i-1]
	    $if (datatype == x)
	    absminval = abs (minval)
	    absmaxval = abs (maxval)
	    if (absminval < absmaxval) {
	    $else
	    if (minval < maxval) {
	    $endif
		k = 1
		l = 2
	    } else {
		$if (datatype == x)
		val = minval
		minval = maxval
		maxval = val
	        absminval = abs (minval)
	        absmaxval = abs (maxval)
		$else
		val = minval
		minval = maxval
		maxval = val
		$endif
		k = 2
		l = 1
	    }
	    do j = 3, nimages {
		val = Mem$t[data[j]+i-1]
	        $if (datatype == x)
	        absval = abs (val)
		if (absval < absminval) {
		    absminval = absval
	        $else
		if (val < minval) {
		$endif
		    mean = mean + minval
		    minval = val
		    k = j
		$if (datatype == x)
		} else if (absval > absmaxval) {
		    absmaxval = absval
		$else
		} else if (val > maxval) {
		$endif
		    mean = mean + maxval
		    maxval = val
		    l = j
		} else
		    mean = mean + val
	    }
	    output[i] = mean / nims
	    Mem$t[data[k]+i-1] = INDEF
	    Mem$t[data[l]+i-1] = INDEF
        }
end
$endfor
