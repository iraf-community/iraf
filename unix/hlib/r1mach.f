      REAL FUNCTION R1MACH(I)
C
C  SINGLE-PRECISION MACHINE CONSTANTS
C
C  R1MACH(1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.
C
C  R1MACH(2) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.
C
C  R1MACH(3) = B**(-T), THE SMALLEST RELATIVE SPACING.
C
C  R1MACH(4) = B**(1-T), THE LARGEST RELATIVE SPACING.
C
C  R1MACH(5) = LOG10(B)
C
C  TO ALTER THIS FUNCTION FOR A PARTICULAR ENVIRONMENT,
C  THE DESIRED SET OF DATA STATEMENTS SHOULD BE ACTIVATED BY
C  REMOVING THE C FROM COLUMN 1.
C
C  FOR IEEE-ARITHMETIC MACHINES (BINARY STANDARD), THE FIRST
C  SET OF CONSTANTS BELOW SHOULD BE APPROPRIATE.
C
C  WHERE POSSIBLE, DECIMAL, OCTAL OR HEXADECIMAL CONSTANTS ARE USED
C  TO SPECIFY THE CONSTANTS EXACTLY.  SOMETIMES THIS REQUIRES USING
C  EQUIVALENT INTEGER ARRAYS.  IF YOUR COMPILER USES HALF-WORD
C  INTEGERS BY DEFAULT (SOMETIMES CALLED INTEGER*2), YOU MAY NEED TO
C  CHANGE INTEGER TO INTEGER*4 OR OTHERWISE INSTRUCT YOUR COMPILER
C  TO USE FULL-WORD INTEGERS IN THE NEXT 5 DECLARATIONS.
C
C  COMMENTS JUST BEFORE THE END STATEMENT (LINES STARTING WITH *)
C  GIVE C SOURCE FOR R1MACH.
C
      INTEGER SMALL(2)
      INTEGER LARGE(2)
      INTEGER RIGHT(2)
      INTEGER DIVER(2)
      INTEGER LOG10(2)
      INTEGER I
C/6S
C/7S
      SAVE SMALL, LARGE, RIGHT, DIVER, LOG10
C/
      REAL RMACH(5)
C
      EQUIVALENCE (RMACH(1),SMALL(1))
      EQUIVALENCE (RMACH(2),LARGE(1))
      EQUIVALENCE (RMACH(3),RIGHT(1))
      EQUIVALENCE (RMACH(4),DIVER(1))
      EQUIVALENCE (RMACH(5),LOG10(1))
C
C     MACHINE CONSTANTS FOR IEEE ARITHMETIC MACHINES, SUCH AS THE AT&T
C     3B SERIES, MOTOROLA 68000 BASED MACHINES (E.G. SUN 3 AND AT&T
C     PC 7300), AND 8087 BASED MICROS (E.G. IBM PC AND AT&T 6300).
C
      DATA SMALL(1) /     8388608 /
      DATA LARGE(1) /  2139095039 /
      DATA RIGHT(1) /   864026624 /
      DATA DIVER(1) /   872415232 /
      DATA LOG10(1) /  1050288283 /
C
C     MACHINE CONSTANTS FOR AMDAHL MACHINES.
C
C      DATA SMALL(1) /    1048576 /
C      DATA LARGE(1) / 2147483647 /
C      DATA RIGHT(1) /  990904320 /
C      DATA DIVER(1) / 1007681536 /
C      DATA LOG10(1) / 1091781651 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE BURROUGHS 1700 SYSTEM.
C
C      DATA RMACH(1) / Z400800000 /
C      DATA RMACH(2) / Z5FFFFFFFF /
C      DATA RMACH(3) / Z4E9800000 /
C      DATA RMACH(4) / Z4EA800000 /
C      DATA RMACH(5) / Z500E730E8 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE BURROUGHS 5700/6700/7700 SYSTEMS.
C
C      DATA RMACH(1) / O1771000000000000 /
C      DATA RMACH(2) / O0777777777777777 /
C      DATA RMACH(3) / O1311000000000000 /
C      DATA RMACH(4) / O1301000000000000 /
C      DATA RMACH(5) / O1157163034761675 /, SC/987/
C
C     MACHINE CONSTANTS FOR FTN4 ON THE CDC 6000/7000 SERIES.
C
C      DATA RMACH(1) / 00564000000000000000B /
C      DATA RMACH(2) / 37767777777777777776B /
C      DATA RMACH(3) / 16414000000000000000B /
C      DATA RMACH(4) / 16424000000000000000B /
C      DATA RMACH(5) / 17164642023241175720B /, SC/987/
C
C     MACHINE CONSTANTS FOR FTN5 ON THE CDC 6000/7000 SERIES.
C
C      DATA RMACH(1) / O"00564000000000000000" /
C      DATA RMACH(2) / O"37767777777777777776" /
C      DATA RMACH(3) / O"16414000000000000000" /
C      DATA RMACH(4) / O"16424000000000000000" /
C      DATA RMACH(5) / O"17164642023241175720" /, SC/987/
C
C     MACHINE CONSTANTS FOR CONVEX C-1.
C
C      DATA RMACH(1) / '00800000'X /
C      DATA RMACH(2) / '7FFFFFFF'X /
C      DATA RMACH(3) / '34800000'X /
C      DATA RMACH(4) / '35000000'X /
C      DATA RMACH(5) / '3F9A209B'X /, SC/987/
C
C     MACHINE CONSTANTS FOR THE CRAY 1, XMP, 2, AND 3.
C
C      DATA RMACH(1) / 200034000000000000000B /
C      DATA RMACH(2) / 577767777777777777776B /
C      DATA RMACH(3) / 377224000000000000000B /
C      DATA RMACH(4) / 377234000000000000000B /
C      DATA RMACH(5) / 377774642023241175720B /, SC/987/
C
C     MACHINE CONSTANTS FOR THE DATA GENERAL ECLIPSE S/200.
C
C     NOTE - IT MAY BE APPROPRIATE TO INCLUDE THE FOLLOWING LINE -
C     STATIC RMACH(5)
C
C      DATA SMALL/20K,0/,LARGE/77777K,177777K/
C      DATA RIGHT/35420K,0/,DIVER/36020K,0/
C      DATA LOG10/40423K,42023K/, SC/987/
C
C     MACHINE CONSTANTS FOR THE HARRIS SLASH 6 AND SLASH 7.
C
C      DATA SMALL(1),SMALL(2) / '20000000, '00000201 /
C      DATA LARGE(1),LARGE(2) / '37777777, '00000177 /
C      DATA RIGHT(1),RIGHT(2) / '20000000, '00000352 /
C      DATA DIVER(1),DIVER(2) / '20000000, '00000353 /
C      DATA LOG10(1),LOG10(2) / '23210115, '00000377 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.
C
C      DATA RMACH(1) / O402400000000 /
C      DATA RMACH(2) / O376777777777 /
C      DATA RMACH(3) / O714400000000 /
C      DATA RMACH(4) / O716400000000 /
C      DATA RMACH(5) / O776464202324 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE IBM 360/370 SERIES,
C     THE XEROX SIGMA 5/7/9 AND THE SEL SYSTEMS 85/86.
C
C      DATA RMACH(1) / Z00100000 /
C      DATA RMACH(2) / Z7FFFFFFF /
C      DATA RMACH(3) / Z3B100000 /
C      DATA RMACH(4) / Z3C100000 /
C      DATA RMACH(5) / Z41134413 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE INTERDATA 8/32
C     WITH THE UNIX SYSTEM FORTRAN 77 COMPILER.
C
C     FOR THE INTERDATA FORTRAN VII COMPILER REPLACE
C     THE Z'S SPECIFYING HEX CONSTANTS WITH Y'S.
C
C      DATA RMACH(1) / Z'00100000' /
C      DATA RMACH(2) / Z'7EFFFFFF' /
C      DATA RMACH(3) / Z'3B100000' /
C      DATA RMACH(4) / Z'3C100000' /
C      DATA RMACH(5) / Z'41134413' /, SC/987/
C
C     MACHINE CONSTANTS FOR THE PDP-10 (KA OR KI PROCESSOR).
C
C      DATA RMACH(1) / "000400000000 /
C      DATA RMACH(2) / "377777777777 /
C      DATA RMACH(3) / "146400000000 /
C      DATA RMACH(4) / "147400000000 /
C      DATA RMACH(5) / "177464202324 /, SC/987/
C
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING
C     32-BIT INTEGERS (EXPRESSED IN INTEGER AND OCTAL).
C
C      DATA SMALL(1) /    8388608 /
C      DATA LARGE(1) / 2147483647 /
C      DATA RIGHT(1) /  880803840 /
C      DATA DIVER(1) /  889192448 /
C      DATA LOG10(1) / 1067065499 /, SC/987/
C
C      DATA RMACH(1) / O00040000000 /
C      DATA RMACH(2) / O17777777777 /
C      DATA RMACH(3) / O06440000000 /
C      DATA RMACH(4) / O06500000000 /
C      DATA RMACH(5) / O07746420233 /, SC/987/
C
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING
C     16-BIT INTEGERS  (EXPRESSED IN INTEGER AND OCTAL).
C
C      DATA SMALL(1),SMALL(2) /   128,     0 /
C      DATA LARGE(1),LARGE(2) / 32767,    -1 /
C      DATA RIGHT(1),RIGHT(2) / 13440,     0 /
C      DATA DIVER(1),DIVER(2) / 13568,     0 /
C      DATA LOG10(1),LOG10(2) / 16282,  8347 /, SC/987/
C
C      DATA SMALL(1),SMALL(2) / O000200, O000000 /
C      DATA LARGE(1),LARGE(2) / O077777, O177777 /
C      DATA RIGHT(1),RIGHT(2) / O032200, O000000 /
C      DATA DIVER(1),DIVER(2) / O032400, O000000 /
C      DATA LOG10(1),LOG10(2) / O037632, O020233 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE SEQUENT BALANCE 8000.
C
C      DATA SMALL(1) / $00800000 /
C      DATA LARGE(1) / $7F7FFFFF /
C      DATA RIGHT(1) / $33800000 /
C      DATA DIVER(1) / $34000000 /
C      DATA LOG10(1) / $3E9A209B /, SC/987/
C
C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.
C
C      DATA RMACH(1) / O000400000000 /
C      DATA RMACH(2) / O377777777777 /
C      DATA RMACH(3) / O146400000000 /
C      DATA RMACH(4) / O147400000000 /
C      DATA RMACH(5) / O177464202324 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE VAX UNIX F77 COMPILER.
C
C      DATA SMALL(1) /       128 /
C      DATA LARGE(1) /    -32769 /
C      DATA RIGHT(1) /     13440 /
C      DATA DIVER(1) /     13568 /
C      DATA LOG10(1) / 547045274 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE VAX-11 WITH
C     FORTRAN IV-PLUS COMPILER.
C
C      DATA RMACH(1) / Z00000080 /
C      DATA RMACH(2) / ZFFFF7FFF /
C      DATA RMACH(3) / Z00003480 /
C      DATA RMACH(4) / Z00003500 /
C      DATA RMACH(5) / Z209B3F9A /, SC/987/
C
C     MACHINE CONSTANTS FOR VAX/VMS VERSION 2.2.
C
C      DATA RMACH(1) /       '80'X /
C      DATA RMACH(2) / 'FFFF7FFF'X /
C      DATA RMACH(3) /     '3480'X /
C      DATA RMACH(4) /     '3500'X /
C      DATA RMACH(5) / '209B3F9A'X /, SC/987/
C
C  ***  ISSUE STOP 777 IF ALL DATA STATEMENTS ARE COMMENTED...
C      IF (SC .NE. 987) THEN
C*        *** CHECK FOR AUTODOUBLE ***
C         SMALL(2) = 0
C         RMACH(1) = 1E13
C         IF (SMALL(2) .NE. 0) THEN
C*           *** AUTODOUBLED ***
C            IF (      SMALL(1) .EQ. 1117925532
C     *          .AND. SMALL(2) .EQ. -448790528) THEN
C*              *** IEEE BIG ENDIAN ***
C               SMALL(1) = 1048576
C               SMALL(2) = 0
C               LARGE(1) = 2146435071
C               LARGE(2) = -1
C               RIGHT(1) = 1017118720
C               RIGHT(2) = 0
C               DIVER(1) = 1018167296
C               DIVER(2) = 0
C               LOG10(1) = 1070810131
C               LOG10(2) = 1352628735
C            ELSE IF ( SMALL(2) .EQ. 1117925532
C     *          .AND. SMALL(1) .EQ. -448790528) THEN
C*              *** IEEE LITTLE ENDIAN ***
C               SMALL(2) = 1048576
C               SMALL(1) = 0
C               LARGE(2) = 2146435071
C               LARGE(1) = -1
C               RIGHT(2) = 1017118720
C               RIGHT(1) = 0
C               DIVER(2) = 1018167296
C               DIVER(1) = 0
C               LOG10(2) = 1070810131
C               LOG10(1) = 1352628735
C            ELSE IF ( SMALL(1) .EQ. -2065213935
C     *          .AND. SMALL(2) .EQ. 10752) THEN
C*              *** VAX WITH D_FLOATING ***
C               SMALL(1) = 128
C               SMALL(2) = 0
C               LARGE(1) = -32769
C               LARGE(2) = -1
C               RIGHT(1) = 9344
C               RIGHT(2) = 0
C               DIVER(1) = 9472
C               DIVER(2) = 0
C               LOG10(1) = 546979738
C               LOG10(2) = -805796613
C            ELSE IF ( SMALL(1) .EQ. 1267827943
C     *          .AND. SMALL(2) .EQ. 704643072) THEN
C*              *** IBM MAINFRAME ***
C               SMALL(1) = 1048576
C               SMALL(2) = 0
C               LARGE(1) = 2147483647
C               LARGE(2) = -1
C               RIGHT(1) = 856686592
C               RIGHT(2) = 0
C               DIVER(1) = 873463808
C               DIVER(2) = 0
C               LOG10(1) = 1091781651
C               LOG10(2) = 1352628735
C            ELSE
C               WRITE(*,*)'Adjust autodoubled R1MACH by uncommenting'
C               WRITE(*,*)'data statements appropriate for your machine.'
C               STOP 777
C               END IF
C         ELSE
C            RMACH(1) = 1234567.
C            IF (SMALL(1) .EQ. 1234613304) THEN
C*              *** IEEE ***
C               SMALL(1) = 8388608
C               LARGE(1) = 2139095039
C               RIGHT(1) = 864026624
C               DIVER(1) = 872415232
C               LOG10(1) = 1050288283
C            ELSE IF (SMALL(1) .EQ. -1271379306) THEN
C*              *** VAX ***
C               SMALL(1) = 128
C               LARGE(1) = -32769
C               RIGHT(1) = 13440
C               DIVER(1) = 13568
C               LOG10(1) = 547045274
C            ELSE IF (SMALL(1) .EQ. 1175639687) THEN
C*              *** IBM ***
C               SMALL(1) = 1048576
C               LARGE(1) = 2147483647
C               RIGHT(1) = 990904320
C               DIVER(1) = 1007681536
C               LOG10(1) = 1091781651
C            ELSE
C               WRITE(*,*)'Adjust R1MACH by uncommenting'
C               WRITE(*,*)'data statements appropriate for your machine.'
C               STOP 777
C               END IF
C            END IF
C         SC = 987
C         END IF
C
C  ***  ISSUE STOP 776 IF ALL DATA STATEMENTS ARE OBVIOUSLY WRONG...
C      IF (RMACH(4) .GE. 1.0) STOP 776
C*C/6S
C*C     IF (I .LT. 1  .OR.  I .GT. 5)
C*C    1   CALL SETERR(24HR1MACH - I OUT OF BOUNDS,24,1,2)
C*C/7S
C*      IF (I .LT. 1  .OR.  I .GT. 5)
C*     1   CALL SETERR('R1MACH - I OUT OF BOUNDS',24,1,2)
C*C/
C
C      IF (I .LT. 1 .OR. I .GT. 5) THEN
C         WRITE(*,*) 'R1MACH(I): I =',I,' is out of bounds.'
C         STOP
C         END IF
      IF (I .LT. 1 .OR. I .GT. 5) THEN
	  R1MACH = 0.0
      END IF
      R1MACH = RMACH(I)
      RETURN
C
C* /* C source for R1MACH -- remove the * in column 1 */
C*#include <stdio.h>
C*#include <float.h>
C*#include <math.h>
C*
C*float r1mach_(long *i)
C*{
C*	switch(*i){
C*	  case 1: return FLT_MIN;
C*	  case 2: return FLT_MAX;
C*	  case 3: return FLT_EPSILON/FLT_RADIX;
C*	  case 4: return FLT_EPSILON;
C*	  case 5: return log10(FLT_RADIX);
C*	  }
C*
C*	fprintf(stderr, "invalid argument: r1mach(%ld)\n", *i);
C*	exit(1);
C*	return 0; /* for compilers that complain of missing return values */
C*	}
      END
