To build CFITSIO library on an Intel Mac as a Universal Binary

Unzip the library:
- tar xzf cfitsio3060.tar.gz (or whatever version this is)

- cd cfitsio/

- copy the cfitsio-xcodeproj.zip file here

- unzip cfitsio-xcodeproj.zip

- start Xcode and open cfitsio.xcodeproj

- expand the "Targets" menu under "Groups & Files" 

- choose one of the following build options:

  * right-click on Build PPC -> Build "Build PPC"

  * right-click on Build i386 -> Build "Build i386"

  * right-click on Build x86_64 -> Build "Build x86_64"

  * right-click on Build Universal -> Build "Build Universal"
    (Builds all three of the above options, i.e. a Universal Binary
     usable on ppc, i386, and x86_64 architectures)

  (For some reason clicking on the menu "Build" icon doesn't seem to
   work correctly, but the right-click menus do).

-------------------------------------------------------

Another way to build the universal binary:

- unpack the cfitsio source code tar file
- cd cfitsio

Set the CFLAGS environment variable for building a Universal Binary:

  C-Shell variants:
  setenv CFLAGS "-arch ppc -arch i386 -arch x86_64 -g -O2"

  Bourne Shell variants:
  export CFLAGS="-arch ppc -arch i386 -arch x86_64 -g -O2"

Then proceed with the standard cfitsio build, i.e.:

- ./configure
- make
- make install


-------------------------------------------------------

Below, are the old (and now obsolete) instructions for building CFITSIO
on classic Mac OS-9 or earlier versions:

1. Un binhex and unstuff cfitsio_mac.sit.hqx
2. put CFitsioPPC.mcp in the cfitsio directory.
2. Load CFitsioPPC.mcp into CodeWarrior Pro 5 and make.
   This builds the cfitsio library for PPC.  There are also targets for both 
   the test program and the speed test program.

To use the MacOS port you can add Cfitsio PPC.lib to your Codewarrior Pro 5
project.  Note that this only has been tested for the PPC. It probably
won't work on 68k macs.  Also note that the fortran bindings aren't
included.  I haven't worked with the codewarrior f2c plugin so I don't know
how these would work.  If one is interested, please write and I can look
into this.

