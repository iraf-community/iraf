VOClient - Multi-language, client-side integration with VO
--------------------------------------------------------------------------

VOClient implements the client side of the core VO services,
e.g., registry and data access layer (DAL), providing higher level
functionality for implementing data analysis applications which
use remote VO resources.  It is intended both for use in actual
applications and as a reference implementation of the client-side of
the VO Data Access Layer (DAL) services, as well as a test integration
of various VO services to support actual real-world astronomical
data analysis.  The identical same functionality is made available
all multiple languages and application environments.

In general, scientific analysis applications want a higher level
interface and want to be isolated from the details of, and changes to,
the more fundamental VO protocols and related technology comprising
the core VO infrastructure.  VOClient hides most of the details of
the VO infrastructure, provides a straightfoward way to deal with
protocol versioning, and allows for more transparent infrastructure
evolution as we add support for more advanced capabilities such as
authentication, asychronous services and data transport, and so forth.

In general, astronomical users fall into two camps: those who
want canned, push-button capabilities, providing an efficient,
minimal effort path to get what they want, and those who want a
"hands on" capability, where they can be in charge and do what they
want, customizing the processing as desired, while still having
the environment providing as much as possible of the necessary
functionality.  Often the same user will be in both camps at different
times.  The "hands on" case is especially important in the case of
classical PI-driven observing projects requiring some degree of custom
processing, and is likely to continue to be the case with custom data
mining projects in the future as well.  VOClient supports both cases:
the "hands on" case is supported directly, while the "canned" case can
be supported indirectly via applications written on top of VOClient.


VOClient has the following architecture:

    Client APIs					C, Java, Python, IRAF, etc.
          |
    VOClient daemon				Runs locally
	DALClient library			Client side of VO services
	Registry, Sesame, etc.			Other useful VO services
	(VOStore - TBA)				Network data store; to be added
	(DALServer functionality - TBD)		To publish data back to VO
	  |
    Remote VO Services				Internet/Grid


The current implementation supports client-side development in C,
Java, IRAF, and FORTRAN.  Support for Python, Perl, PHP, Ruby, Tcl,
and C# is planned and is partially implemented (much of this is based
on autogeneration of language bindings by SWIG).  Integration with IDL
is possible but would require help from someone who has access to IDL.


Principal Directories

    console		Administrative console for the VOClient daemon
    dalclient		Client-side VO Data Access Layer (DAL) Library
    (dalserver)		Server-side DAL library (TBD how we do this; reserved)

    voclientd		The VOClient daemon

    bin			externally-callable VOClient binaries
    doc			Documentation
    lib			VOClient libraries, e.g., for application environments
    include		VOClient include files


External Dependencies

    VOTWrap interface to JAVOT, SAVOT VOTable libraries
    development support for python, tcl, iraf to build API bindings


Status

    The current VOClient implementation is a prototype and is evolving
    rapidly.  We have made some effort to define a stable architecture,
    but the details of the functionality and interfaces provided can
    be expected to evolve significantly.


Contributors

    Doug Tody (NRAO)            - Overall VOClient, DALClient library
    Michael Fitzpatrick (NOAO)  - Client APIs and protocol, initial VOClient
				  daemon implementation

Current Version
    
    V0.8.1 August 2006



The VOClient API
=================

This API allows programs written in a variety of supported compiled
or scripted languages or environments to make use of VO resources.
For each target application language or environment an API is defined
which provides a RPC-style, client-server interface between the client
application and the VOClient daemon (voclientd).   The VOClient API
is essentially the same in all target languages and environments.
The vocliend daemon is multi-theaded and can support multiple
simultaneous requests and client applications.  State is maintained
in the server and values passed back are language-neutral integer
'handles' on the remote objects, or simple int/double/string values.

To develop an application with VOClient in a compiled language
environment, applications must link against the library libvoclient.a,
and may need to include the C header file VOClient.h.  These are
installed in /usr/local by default, but this is a build-time option.

The process required to develop an application in a scripting language
depends upon the language; usually it requires loading an optional
"voclient" module.  Building and installing the module required to
interface to a scripting language is a VOClient build-time option.


VO Client Interface Initialization/Shutdown
--------------------------------------------

All VOClient client applications should begin with a call to
the procedure voc_initVOClient() to initialize the system,
the voc_closeVOClient() should be called when a task completes.
The exception are the procedures identified below as "high-level
functions" where the procedure is atomic and will re-initialize the
interace if it isn't already opened.

	 voc_initVOClient (config_opts)
	voc_closeVOClient (shutdown_flag)
	voc_abortVOClient (errcode, errmsg)

Notes

    *	The 'config_opts' parameter is currently not implemented.
    *	The 'shutdown_flag' should be 0 (zero) to leave the daemon running,
	or 1 (one) to force the daemon to quit.
   


DAL (Data Access Layer) Interface
----------------------------------

All tasks must initialize the VO Client and establish a connection
to the a DAL server by calling voc_initVOClient() before making any
service connections; thereafter new connections may be opened/closed
at will.  Convenience procedures allow for easy use of specific
services, e.g. Cone or Siap.  Service-specific parameters may be added
to a query using the voc_add<type>Param() calls.  No action is taken
until an execute of the query is performed.  Applications may get
back a handle on the result and interrogate attributes directly, the
raw VOTable or a CSV representation of the result may also be returned.

Detailed information on the DAL interface is given in the Javadoc
files in the dalclient/doc subdirectory.


High-Level Functions:
  
          string = voc_coneCaller (url, ra, dec, sr, otype)
    status = voc_coneCallerToFile (url, ra, dec, sr, otype, file)
          string = voc_siapCaller (url, ra, dec, rsize, dsize, fmt, otype)
    status = voc_siapCallerToFile (url, ra, dec, rsize, dsize, fmt, otype, file)
   
Main DAL Interface Procedures:
  
         dal = voc_openConnection (svc_url, type)
     dal = voc_openConeConnection (svc_url)		    # Utility aliases
     dal = voc_openSiapConnection (svc_url)
              voc_closeConnection (dal)
   
      count = voc_getServiceCount (dal)
                voc_addServiceURL (dal, svc_url)
          url = voc_getServiceURL (dal, index)
   
             query = voc_getQuery (dal, type)
         query = voc_getConeQuery (dal, ra, dec, sr)
         query = voc_getSiapQuery (dal, ra, dec, ra_size, dec_size, format)
  
           stat = voc_addIntParam (query, pname, ival)
         stat = voc_addFloatParam (query, pname, dval)
        stat = voc_addStringParam (query, pname, str)
   
     url_str = voc_getQueryString (query, type, index)
  
            qr = voc_executeQuery (query)
        stat = voc_executeQueryAs (query, fname, type)
         csv_str = voc_executeCSV (query)
     vot_str = voc_executeVOTable (query)
  
       count = voc_getRecordCount (qr)
              rec = voc_getRecord (qr, recnum)
  
          attr = voc_getAttribute (rec, char  attrname)
         count = voc_getAttrCount (rec)                   
       list_str = voc_getAttrList (rec)                   
  
              ival = voc_intValue (attr)
            dval = voc_floatValue (attr)
            str = voc_stringValue (attr)
  
                   voc_setIntAttr (rec, attrname, ival)   (Not Yet Implemented)
                 voc_setFloatAttr (rec, attrname, dval)   ( "   "      "      )
                voc_setStringAttr (rec, attrname, str)    ( "   "      "      )
  
            stat = voc_getDataset (rec, acref, fname) 
  
  
Sesame Name Resolver Interface
-------------------------------
  
            sr = voc_nameResolver (target)	// High-level function
        pos_str = voc_resolverPos (sr)
           radeg = voc_resolverRA (sr)
         decdeg = voc_resolverDEC (sr)
   


Registry Query Interface
-------------------------
   
High-Level Functions:

             res = voc_regSearch (sql, keywords, orValues)
     res =voc_regSearchByService (svc, term, orValues)
   

Programmatic Query:
   
            query = voc_regQuery (term, orValues) 	// OR keyword list?
   
            voc_regAddSearchTerm (query, term, orValue)	// OR term w/ previous
         voc_regRemoveSearchTerm (query, term)		// remove search term
       count = voc_regGetSTCount (query)
   
     str = voc_regGetQueryString (query)		// GET form of query
   
            res = voc_regExecute (query)		// return result obj
         str = voc_regExecuteRaw (query)		// return raw XML
   

Registry Query Result:

       count = voc_resGetCount  (res)

           str = voc_resGetStr  (res, attribute, index) dval =
        voc_resGetFloat  (res, attribute, index)
          ival = voc_resGetInt  (res, attribute, index)


For this implementation, we've chosen to use the NVO Registry at
JHU/STScI, specifically the QueryRegistry() method which provides a
'SimpleResource' form of the resource record.  Support for the newer
IVOA standard will be added later; for now we can quickly access the
most commonly used fields of a resource using both a keyword and SQL
form of the search.
