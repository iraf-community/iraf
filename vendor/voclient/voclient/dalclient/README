DAL Client Interface Java Prototype
D.Tody August 2005
-----------------------------

This directory contains a prototype client interface to the VO data
access services, implemented in Java, plus some simple programs to test
the interface while providing examples of usage.

This interface is an initial prototype, is not yet stable and is subject
to interface changes in future versions.


Interface Summary
-----------------------------

DAL Query (Base class)

	 dal = new DALConnection()			# DALConnection
	 dal = new DALConnection(service-url)

		  dal.addService(service-url)
	     dal.getServiceCount()
	       dal.getServiceURL(index)
	 query = dal.getDALQuery()
	      query.addParameter(name, value)
	    query.getQueryString(serviceIndex)

	        query.executeCSV()
	        query.executeCSV(fname)
      vot = query.executeVOTable()
	   is = query.executeRAW()


CONE Query (extends DAL Query)

       cone = new ConeConnection()
       cone = new ConeConnection(service-url)

       query = cone.getConeQuery()
       query = cone.getConeQuery(ra, dec, sr)
	      query.addParameter(name, value)

	      qr = query.execute()			# VOTable -> Dataset
	        query.executeCSV()
	        query.executeCSV(fname)
      vot = query.executeVOTable()
	   is = query.executeRAW()


SIAP Query (extends DAL Query)

       siap = new SiapConnection()
       siap = new SiapConnection(service-url)

       query = siap.getSiapQuery()
       query = siap.getSiapQuery(ra, dec, size)
       query = siap.getSiapQuery(ra, dec, size, format)
       query = siap.getSiapQuery(ra, dec, ra_size, dec_size)
       query = siap.getSiapQuery(ra, dec, ra_size, dec_size, format)
	      query.addParameter(name, value)

	      qr = query.execute()			# VOTable -> Dataset
	        query.executeCSV()
	        query.executeCSV(fname)
      vot = query.executeVOTable()
	   is = query.executeRAW()


SSAP Query (extends DAL Query)


           ssap = SsapConnection() 
           ssap = SsapConnection(service-url)) {

            query = getSsapQuery()
            query = getSsapQuery(ra, dec)
            query = getSsapQuery(ra, dec, size)
            query = getSsapQuery(ra, dec, size, band)
            query = getSsapQuery(ra, dec, size, band, format)
            query = getSsapQuery(ra, dec, size, band, time, format)

 
              query.addParameter(name, value)

              qr = query.execute()                      # VOTable -> Dataset
                query.executeCSV()
                query.executeCSV(fname)
      vot = query.executeVOTable()
           is = query.executeRAW()


    This is very similar to SIAP, but the query parameters are somewhat
    different, and allow queries by spectral and time bandpass as well
    as other parameters.  The returned dataset metadata as captured
    in the query response differs significantly, being based on a
    more evolved physical d dataset model.


QueryResponse (applies to all DAL data object types)

    The response to a DAL query can be processed directly as a VOTable,
    the low level, generic format in which it is encoded.  However this
    requires knowledge within the client code of the details of the
    DAL protocol used.  The QueryResponse class goes one step further
    and provides an object API based on the data model for a particular
    object (catalog, image, spectrum, etc.).  This allows an application to
    interact with a remote data object service without detailed knowledge
    of the underlying DAL protocol used, including transport protocols
    and data containers and formats, such as FITS and VOTable.

    QueryResponse is a sequence of dataset descriptors.  Each dataset is
    described by a set of standard data model attributes.   A data provider
    may add additional non-standard attributes.  These are not visible in
    the standard data model via the normal query-by-attribute interface, but
    can be accessed by traversing a response record as a sequence of fields.

	Get dataset descriptor:

	   qr.getRecordCount()				# number of descriptors
	  rec = qr.getRecord(i)				# get a descriptor

	Access by dataset attribute:

	    rec.setAttribute("<attrname>", "<value>")
	v = rec.getAttribute("<attrname>")		# may return null

		 v.boolValue()
		  v.intValue()
		v.floatValue()
	       v.doubleValue()
	       v.stringValue()

	Get dataset file corresponding to descriptor:

	      rec.getDataset("<path>")	# fetch data to <path>
       path = rec.getDataset()		# fetch data to generated filename

