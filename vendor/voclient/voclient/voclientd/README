voclientd - VOClient Daemon
---------------------------

The VOClient Daemon is a service which runs locally on a user
workstation or cluster.  It supports multiple local client application
connections, and interfaces to VO data access, registry, and other
services on the backend.  Local clients connect via an efficient,
stateful client-server protocol.  The VO interface uses more granular,
Internet/Grid oriented VO protocols.

Local clients in general see only a client API which is optimized
for the language or environment in which the client application is
developed (Python for example).  The client-server wire protocol is
generally invisible to client applications.  To simplify the initial
implementation, the current client-server protocol (documented below)
is proprietary, however alternative wire protocols and frameworks
can easily be added in the future.


VOClient Client-Server Interface
--------------------------------

This directory contains a prototype VOClient interface intended to
provide client applications with a uniform, multilanguage, higher
level interface to VO data access, registry, and other services.
The core protocol is is implemented as a C library on the client side,
while the VOClient daemon itself is implemented in Java since this is
the predominant implementation language for most of the VO/Web/Grid
infrastructure.

Client programs connect to the server via an Internet socket and
exchange data to make remote calls using a simple messaging interface.
The network interface bridges the language barrier allowing non-Java
programs (e.g. C-based languages such as Python/PHP or IRAF SPP)
easier access to VO protocols without needing to reimplement the
functionality entirely in C or the know details of how the query is
executed or the return type.

	+--------------+         +------------+---------+
	|   Client | A |   inet  | voclientd  | DAL/VO  |
	|    App / | P |<=======>|  (Java)    | Classes |
	|  Wrapper | I |  socket |            |         |
	+--------------+         +------------+---------+

The (Java) voclientd interface is implemented as a multi-threaded daemon
operating on a known public port.  Each client establishes a connection and
is able to create its own runtime context of objects that will persist
until the connection is closed by the client.  A single server instance is
able to handle multiple client connections from anywhere on the internet.
A voclientd may be spawned by the application itself if no running server
is found on the machine.

A data center may wish to operate a daemon next to the traditional DAL
services.  This provides fast access to the data as well as an additional
layer of query/access for client applications who may be interested in
only some of the data (e.g. object coords and not the whole table for
a client running on a slow connection) or metadata about the results
(e.g. a simple count of records, availability of a column, etc).


Client Interface Summary
-------------------------

The client interface is a thin API, with most or all state maintained
in the VOClient daemon itself, on both a per-connection and per-daemon
basis.  Logical datatypes such as 'Query' are long integers used as
identifiers to be passed to voclientd when manipulating the object.
These types are easily handled by other languages and avoid the need
for mapping structures externally or handling pointers.

The runtime details of the interface (e.g. socket descriptors) are
kept internal to the interface in a static strucure.  This limits the
current interface to using a single connection to voclientd but that
should be sufficient for almost all applications.


           voc_openVOClient (opts)
          voc_addMsgHandler (target, handler)

	    str = getErrMsg ()

       dal = openConnection (service_url, type)
   dal = openConeConnection (service_url)	    # utility aliases
   dal = openSiapConnection (service_url)
            closeConnection (dal)

    count = getServiceCount (dal, type)		    # type==NULL -> all
	      addServiceURL (dal, service_url, type)
	url = getServiceURL (dal, index)
      type = getServiceType (dal, index)

	   query = getQuery (dal, type)		    # get a query context
       query = getConeQuery (dal, ra, dec, sr)	    # convenience calls
       query = getSiapQuery (dal, ra, dec, ra_size, dec_size, format)

                addIntParam (query, name, ival)
              addFloatParam (query, name, dval)
                addIntParam (query, name, str)
         ival = getIntParam (query, name)
       dval = getFloatParam (query, name)
       str = getStringParam (query, name)

       str = getQueryString (query, index)	

          qr = executeQuery (query)		    # VOTable -> Dataset
             executeQueryAs (query, fname, type)    # type = CSV|VOTable|Raw

     count = getRecordCount (qr)		    # number of descriptors


Access by dataset attribute:

	    rec = getRecord (qr, recnum)	    # get a descriptor

	         setIntAttr (rec, attrname, ival)
	       setFloatAttr (rec, attrname, dval)
	      setStringAttr (rec, attrname, str)
	  ival = getIntAttr (rec, attrname)
	dval = getFloatAttr (rec, attrname)
        str = getStringAttr (rec, attrname)

       count = getAttrCount (rec)		    # NYI in DALClient
         list = getAttrList (rec)
	  str = getAttrName (rec, index)


Get dataset file (i.e. AccessReference) corresponding to descriptor:

	         getDataset (rec, path)		    # fetch data to <path>
          path = getDataset (rec)		    # fetch data to tmp file


Messaging Interface

	   msg = newCallMsg (objid, method, nparams)
	       addCallParam (msg, type, param)

	 msg = newResultMsg (status, type, nitems)
	       addIntResult (msg, type, param)
	     addFloatResult (msg, type, param)
	    addStringResult (msg, type, param)

	       msg = newMsg (target, str)

	            sendMsg (msg)

            res = getResult ()			    # for reading RESULT msgs

        stat = resultStatus (res)
          type = resultType (res)
      nitems = resultLength (res)

           ival = intResult (res, index)
         dval = floatResult (res, index)
         str = stringResult (res, index)



====================================



====================================

Data Structures
---------------

typedef struct VOClient {
    char   *server_host;		/* socket to voclientd		*/
    int     server_port;
    int	    io_chan;

    int     msg_port;			/* asynch message socket 	*/
    int	    msg_chan;
    int    *msgHandler();
}


typedef unsigned long	DAL;
typedef unsigned long	Query;
typedef unsigned long	QResult;
typedef unsigned long	QRecord;
typedef unsigned long	RecAttr;



====================================

Message Protocol
----------------

Messaging is implemented as a simple form of RPC using text strings.
Messages are composed of a fixed length header packet followed by a
variable length message body encoded as a string.  The header specifies
the length of the string containing the message as well as the type
of message.

There are only three message types

  
    CONNECT	Open/Close a VOClient connection
    CALL	Invoke a method on the specified objectId. 
    RESULT	Return the result of a call.  The <status> field is always
		set, an ACK status can be used to indicate a void result.
		Multiple results may be returned by reading separate messages,
		the called is responsible for knowing how many results are
		expected.
    MSG		An Asynchronous message string.  The <target> may be the 
		reserved string "any", otherwise the interface allows
		handlers to be installed that will subscribe to messages with
		a particular <target> string.


Message Structure:

    CALL    '{' <objId> <method> <nparam> [ <type1> <par1>..<typeN> <parN> ] '}'
    RESULT  '{' <status> [ <type> <length> <value> ] '}'
    MSG	    '{' <target> <str>  '}'


		CALL		1
		RESULT		2
		MSG		3

    <status> 	ERR		-1	integer
		OK		0	integer
		ACK		1	integer

    <type> 	TY_INT		1	integer
		TY_BOOL		2	integer
		TY_FLOAT	3	integer
		TY_STRING	4	integer

    <nparam>				integer
    <length>				integer
    <value>				string
    <target>				string


Examples:

   1) Open VOClient Connection

	CALL { 0 newDALConn 1 4 http://localhost/ }    	# Request Message
        |      |      |     | |         |
        |      |      |     | |         +-------  param1
        |      |      |     | +-----------------  type1          
        |      |      |     +-------------------  nparams
        |      |      +-------------------------  method
        |      +--------------------------------  objId
        +---------------------------------------  type
 
	RES { 0 1 1 2187633 }        			# Response Message
        |     | | |    |
        |     | | |    +------------------------  returned objID
        |     | | +-----------------------------  length (nitems returned)
        |     | +-------------------------------  type
        |     +---------------------------------  status (0 = OK)
        +---------------------------------------  type

   2) Status Message

	MSG { any New Connection from node 'tucana' }
        |     |   |_______________________________|
        |     |                |
        |     |                +----------------  message body
        |     | +-------------------------------  target
        +---------------------------------------  type

